// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module compress_round_function (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        state_0_read,
        state_1_read,
        state_2_read,
        state_3_read,
        state_4_read,
        state_5_read,
        state_6_read,
        state_7_read,
        state_8_read,
        state_9_read,
        state_10_read,
        state_11_read,
        state_1213_read,
        state_13_read,
        state_14_read,
        state_15_read,
        m_0_val,
        m_1_val,
        m_2_val,
        m_3_val,
        m_4_val,
        m_5_val,
        m_6_val,
        m_7_val,
        m_8_val,
        m_9_val,
        m_10_val,
        m_11_val,
        m_12_val,
        m_13_val,
        m_14_val,
        m_15_val,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        ap_return_6,
        ap_return_7,
        ap_return_8,
        ap_return_9,
        ap_return_10,
        ap_return_11,
        ap_return_12,
        ap_return_13,
        ap_return_14,
        ap_return_15
);

parameter    ap_ST_fsm_state1 = 24'd1;
parameter    ap_ST_fsm_state2 = 24'd2;
parameter    ap_ST_fsm_state3 = 24'd4;
parameter    ap_ST_fsm_state4 = 24'd8;
parameter    ap_ST_fsm_state5 = 24'd16;
parameter    ap_ST_fsm_state6 = 24'd32;
parameter    ap_ST_fsm_state7 = 24'd64;
parameter    ap_ST_fsm_state8 = 24'd128;
parameter    ap_ST_fsm_state9 = 24'd256;
parameter    ap_ST_fsm_state10 = 24'd512;
parameter    ap_ST_fsm_state11 = 24'd1024;
parameter    ap_ST_fsm_state12 = 24'd2048;
parameter    ap_ST_fsm_state13 = 24'd4096;
parameter    ap_ST_fsm_state14 = 24'd8192;
parameter    ap_ST_fsm_state15 = 24'd16384;
parameter    ap_ST_fsm_state16 = 24'd32768;
parameter    ap_ST_fsm_state17 = 24'd65536;
parameter    ap_ST_fsm_state18 = 24'd131072;
parameter    ap_ST_fsm_state19 = 24'd262144;
parameter    ap_ST_fsm_state20 = 24'd524288;
parameter    ap_ST_fsm_state21 = 24'd1048576;
parameter    ap_ST_fsm_state22 = 24'd2097152;
parameter    ap_ST_fsm_state23 = 24'd4194304;
parameter    ap_ST_fsm_state24 = 24'd8388608;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] state_0_read;
input  [31:0] state_1_read;
input  [31:0] state_2_read;
input  [31:0] state_3_read;
input  [31:0] state_4_read;
input  [31:0] state_5_read;
input  [31:0] state_6_read;
input  [31:0] state_7_read;
input  [31:0] state_8_read;
input  [31:0] state_9_read;
input  [31:0] state_10_read;
input  [31:0] state_11_read;
input  [31:0] state_1213_read;
input  [31:0] state_13_read;
input  [31:0] state_14_read;
input  [31:0] state_15_read;
input  [31:0] m_0_val;
input  [31:0] m_1_val;
input  [31:0] m_2_val;
input  [31:0] m_3_val;
input  [31:0] m_4_val;
input  [31:0] m_5_val;
input  [31:0] m_6_val;
input  [31:0] m_7_val;
input  [31:0] m_8_val;
input  [31:0] m_9_val;
input  [31:0] m_10_val;
input  [31:0] m_11_val;
input  [31:0] m_12_val;
input  [31:0] m_13_val;
input  [31:0] m_14_val;
input  [31:0] m_15_val;
output  [31:0] ap_return_0;
output  [31:0] ap_return_1;
output  [31:0] ap_return_2;
output  [31:0] ap_return_3;
output  [31:0] ap_return_4;
output  [31:0] ap_return_5;
output  [31:0] ap_return_6;
output  [31:0] ap_return_7;
output  [31:0] ap_return_8;
output  [31:0] ap_return_9;
output  [31:0] ap_return_10;
output  [31:0] ap_return_11;
output  [31:0] ap_return_12;
output  [31:0] ap_return_13;
output  [31:0] ap_return_14;
output  [31:0] ap_return_15;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[31:0] ap_return_0;
reg[31:0] ap_return_1;
reg[31:0] ap_return_2;
reg[31:0] ap_return_3;
reg[31:0] ap_return_4;
reg[31:0] ap_return_5;
reg[31:0] ap_return_6;
reg[31:0] ap_return_7;
reg[31:0] ap_return_8;
reg[31:0] ap_return_9;
reg[31:0] ap_return_10;
reg[31:0] ap_return_11;
reg[31:0] ap_return_12;
reg[31:0] ap_return_13;
reg[31:0] ap_return_14;
reg[31:0] ap_return_15;

(* fsm_encoding = "none" *) reg   [23:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] grp_rotate_right_fu_270_ap_return;
reg   [31:0] reg_310;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state21;
wire   [31:0] grp_rotate_right_fu_277_ap_return;
reg   [31:0] reg_314;
wire   [31:0] grp_rotate_right_fu_284_ap_return;
reg   [31:0] reg_318;
wire   [31:0] grp_rotate_right_fu_291_ap_return;
reg   [31:0] reg_322;
reg   [31:0] reg_326;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state18;
reg   [31:0] reg_330;
reg   [31:0] reg_334;
reg   [31:0] reg_338;
wire   [31:0] add_ln30_1_fu_348_p2;
reg   [31:0] add_ln30_1_reg_902;
wire   [31:0] add_ln31_1_fu_360_p2;
reg   [31:0] add_ln31_1_reg_908;
wire   [31:0] add_ln32_1_fu_372_p2;
reg   [31:0] add_ln32_1_reg_914;
wire   [31:0] add_ln33_1_fu_384_p2;
reg   [31:0] add_ln33_1_reg_920;
wire   [31:0] xor_ln30_fu_390_p2;
reg   [31:0] xor_ln30_reg_926;
wire    ap_CS_fsm_state2;
wire   [31:0] xor_ln31_fu_396_p2;
reg   [31:0] xor_ln31_reg_931;
wire   [31:0] xor_ln32_fu_402_p2;
reg   [31:0] xor_ln32_reg_936;
wire   [31:0] xor_ln33_fu_408_p2;
reg   [31:0] xor_ln33_reg_941;
wire   [31:0] add_ln30_2_fu_414_p2;
reg   [31:0] add_ln30_2_reg_946;
wire    ap_CS_fsm_state4;
wire   [31:0] add_ln31_2_fu_420_p2;
reg   [31:0] add_ln31_2_reg_952;
wire   [31:0] add_ln32_2_fu_426_p2;
reg   [31:0] add_ln32_2_reg_958;
wire   [31:0] add_ln33_2_fu_432_p2;
reg   [31:0] add_ln33_2_reg_964;
wire   [31:0] xor_ln30_1_fu_438_p2;
reg   [31:0] xor_ln30_1_reg_970;
wire    ap_CS_fsm_state5;
wire   [31:0] xor_ln31_1_fu_443_p2;
reg   [31:0] xor_ln31_1_reg_975;
wire   [31:0] xor_ln32_1_fu_448_p2;
reg   [31:0] xor_ln32_1_reg_980;
wire   [31:0] xor_ln33_1_fu_453_p2;
reg   [31:0] xor_ln33_1_reg_985;
wire   [31:0] add_ln30_4_fu_464_p2;
reg   [31:0] add_ln30_4_reg_990;
wire    ap_CS_fsm_state7;
wire   [31:0] add_ln31_4_fu_475_p2;
reg   [31:0] add_ln31_4_reg_996;
wire   [31:0] add_ln32_4_fu_486_p2;
reg   [31:0] add_ln32_4_reg_1002;
wire   [31:0] add_ln33_4_fu_497_p2;
reg   [31:0] add_ln33_4_reg_1008;
wire   [31:0] xor_ln30_2_fu_502_p2;
reg   [31:0] xor_ln30_2_reg_1014;
wire    ap_CS_fsm_state8;
wire   [31:0] xor_ln31_2_fu_508_p2;
reg   [31:0] xor_ln31_2_reg_1019;
wire   [31:0] xor_ln32_2_fu_514_p2;
reg   [31:0] xor_ln32_2_reg_1024;
wire   [31:0] xor_ln33_2_fu_520_p2;
reg   [31:0] xor_ln33_2_reg_1029;
wire   [31:0] add_ln30_5_fu_526_p2;
reg   [31:0] add_ln30_5_reg_1034;
wire    ap_CS_fsm_state10;
wire   [31:0] add_ln31_5_fu_531_p2;
reg   [31:0] add_ln31_5_reg_1040;
wire   [31:0] add_ln32_5_fu_536_p2;
reg   [31:0] add_ln32_5_reg_1046;
wire   [31:0] add_ln33_5_fu_541_p2;
reg   [31:0] add_ln33_5_reg_1052;
wire   [31:0] xor_ln30_3_fu_546_p2;
reg   [31:0] xor_ln30_3_reg_1058;
wire    ap_CS_fsm_state11;
wire   [31:0] xor_ln31_3_fu_552_p2;
reg   [31:0] xor_ln31_3_reg_1063;
wire   [31:0] xor_ln32_3_fu_558_p2;
reg   [31:0] xor_ln32_3_reg_1068;
wire   [31:0] xor_ln33_3_fu_564_p2;
reg   [31:0] xor_ln33_3_reg_1073;
wire   [31:0] add_ln36_1_fu_576_p2;
reg   [31:0] add_ln36_1_reg_1078;
wire    ap_CS_fsm_state13;
wire   [31:0] add_ln37_1_fu_587_p2;
reg   [31:0] add_ln37_1_reg_1084;
wire   [31:0] add_ln38_1_fu_598_p2;
reg   [31:0] add_ln38_1_reg_1090;
wire   [31:0] add_ln39_1_fu_608_p2;
reg   [31:0] add_ln39_1_reg_1096;
wire   [31:0] xor_ln36_fu_614_p2;
reg   [31:0] xor_ln36_reg_1102;
wire    ap_CS_fsm_state14;
wire   [31:0] xor_ln37_fu_620_p2;
reg   [31:0] xor_ln37_reg_1107;
wire   [31:0] xor_ln38_fu_626_p2;
reg   [31:0] xor_ln38_reg_1112;
wire   [31:0] xor_ln39_fu_632_p2;
reg   [31:0] xor_ln39_reg_1117;
wire   [31:0] add_ln36_2_fu_638_p2;
reg   [31:0] add_ln36_2_reg_1122;
wire    ap_CS_fsm_state16;
wire   [31:0] add_ln37_2_fu_643_p2;
reg   [31:0] add_ln37_2_reg_1128;
wire   [31:0] add_ln38_2_fu_648_p2;
reg   [31:0] add_ln38_2_reg_1134;
wire   [31:0] add_ln39_2_fu_653_p2;
reg   [31:0] add_ln39_2_reg_1140;
wire   [31:0] xor_ln36_1_fu_658_p2;
reg   [31:0] xor_ln36_1_reg_1146;
wire    ap_CS_fsm_state17;
wire   [31:0] xor_ln37_1_fu_664_p2;
reg   [31:0] xor_ln37_1_reg_1151;
wire   [31:0] xor_ln38_1_fu_670_p2;
reg   [31:0] xor_ln38_1_reg_1156;
wire   [31:0] xor_ln39_1_fu_676_p2;
reg   [31:0] xor_ln39_1_reg_1161;
wire   [31:0] add_ln36_4_fu_688_p2;
reg   [31:0] add_ln36_4_reg_1166;
wire    ap_CS_fsm_state19;
wire   [31:0] add_ln37_4_fu_699_p2;
reg   [31:0] add_ln37_4_reg_1172;
wire   [31:0] add_ln38_4_fu_710_p2;
reg   [31:0] add_ln38_4_reg_1178;
wire   [31:0] add_ln39_4_fu_721_p2;
reg   [31:0] add_ln39_4_reg_1184;
wire   [31:0] xor_ln36_2_fu_726_p2;
reg   [31:0] xor_ln36_2_reg_1190;
wire    ap_CS_fsm_state20;
wire   [31:0] xor_ln37_2_fu_732_p2;
reg   [31:0] xor_ln37_2_reg_1195;
wire   [31:0] xor_ln38_2_fu_738_p2;
reg   [31:0] xor_ln38_2_reg_1200;
wire   [31:0] xor_ln39_2_fu_744_p2;
reg   [31:0] xor_ln39_2_reg_1205;
wire   [31:0] add_ln36_5_fu_750_p2;
reg   [31:0] add_ln36_5_reg_1210;
wire    ap_CS_fsm_state22;
wire   [31:0] add_ln37_5_fu_755_p2;
reg   [31:0] add_ln37_5_reg_1216;
wire   [31:0] add_ln38_5_fu_760_p2;
reg   [31:0] add_ln38_5_reg_1222;
wire   [31:0] add_ln39_5_fu_765_p2;
reg   [31:0] add_ln39_5_reg_1228;
wire   [31:0] xor_ln36_3_fu_770_p2;
reg   [31:0] xor_ln36_3_reg_1234;
wire    ap_CS_fsm_state23;
wire   [31:0] xor_ln37_3_fu_776_p2;
reg   [31:0] xor_ln37_3_reg_1239;
wire   [31:0] xor_ln38_3_fu_782_p2;
reg   [31:0] xor_ln38_3_reg_1244;
wire   [31:0] xor_ln39_3_fu_788_p2;
reg   [31:0] xor_ln39_3_reg_1249;
wire    grp_rotate_right_fu_270_ap_start;
wire    grp_rotate_right_fu_270_ap_done;
wire    grp_rotate_right_fu_270_ap_idle;
wire    grp_rotate_right_fu_270_ap_ready;
reg   [31:0] grp_rotate_right_fu_270_x;
reg   [4:0] grp_rotate_right_fu_270_n;
wire    grp_rotate_right_fu_277_ap_start;
wire    grp_rotate_right_fu_277_ap_done;
wire    grp_rotate_right_fu_277_ap_idle;
wire    grp_rotate_right_fu_277_ap_ready;
reg   [31:0] grp_rotate_right_fu_277_x;
reg   [4:0] grp_rotate_right_fu_277_n;
wire    grp_rotate_right_fu_284_ap_start;
wire    grp_rotate_right_fu_284_ap_done;
wire    grp_rotate_right_fu_284_ap_idle;
wire    grp_rotate_right_fu_284_ap_ready;
reg   [31:0] grp_rotate_right_fu_284_x;
reg   [4:0] grp_rotate_right_fu_284_n;
wire    grp_rotate_right_fu_291_ap_start;
wire    grp_rotate_right_fu_291_ap_done;
wire    grp_rotate_right_fu_291_ap_idle;
wire    grp_rotate_right_fu_291_ap_ready;
reg   [31:0] grp_rotate_right_fu_291_x;
reg   [4:0] grp_rotate_right_fu_291_n;
reg    grp_rotate_right_fu_270_ap_start_reg;
wire    ap_CS_fsm_state24;
reg    grp_rotate_right_fu_277_ap_start_reg;
reg    grp_rotate_right_fu_284_ap_start_reg;
reg    grp_rotate_right_fu_291_ap_start_reg;
wire   [31:0] add_ln30_fu_342_p2;
wire   [31:0] add_ln31_fu_354_p2;
wire   [31:0] add_ln32_fu_366_p2;
wire   [31:0] add_ln33_fu_378_p2;
wire   [31:0] add_ln30_3_fu_458_p2;
wire   [31:0] add_ln31_3_fu_469_p2;
wire   [31:0] add_ln32_3_fu_480_p2;
wire   [31:0] add_ln33_3_fu_491_p2;
wire   [31:0] add_ln36_fu_570_p2;
wire   [31:0] add_ln37_fu_581_p2;
wire   [31:0] add_ln38_fu_592_p2;
wire   [31:0] add_ln39_fu_603_p2;
wire   [31:0] add_ln36_3_fu_682_p2;
wire   [31:0] add_ln37_3_fu_693_p2;
wire   [31:0] add_ln38_3_fu_704_p2;
wire   [31:0] add_ln39_3_fu_715_p2;
reg   [31:0] ap_return_0_preg;
reg    ap_block_state24_on_subcall_done;
reg   [31:0] ap_return_1_preg;
reg   [31:0] ap_return_2_preg;
reg   [31:0] ap_return_3_preg;
reg   [31:0] ap_return_4_preg;
reg   [31:0] ap_return_5_preg;
reg   [31:0] ap_return_6_preg;
reg   [31:0] ap_return_7_preg;
reg   [31:0] ap_return_8_preg;
reg   [31:0] ap_return_9_preg;
reg   [31:0] ap_return_10_preg;
reg   [31:0] ap_return_11_preg;
reg   [31:0] ap_return_12_preg;
reg   [31:0] ap_return_13_preg;
reg   [31:0] ap_return_14_preg;
reg   [31:0] ap_return_15_preg;
reg   [23:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_block_state3_on_subcall_done;
reg    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
reg    ap_block_state6_on_subcall_done;
reg    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
reg    ap_block_state9_on_subcall_done;
reg    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
reg    ap_block_state12_on_subcall_done;
reg    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
reg    ap_block_state15_on_subcall_done;
reg    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
reg    ap_block_state18_on_subcall_done;
reg    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
reg    ap_block_state21_on_subcall_done;
reg    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
reg    ap_ST_fsm_state24_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 24'd1;
#0 grp_rotate_right_fu_270_ap_start_reg = 1'b0;
#0 grp_rotate_right_fu_277_ap_start_reg = 1'b0;
#0 grp_rotate_right_fu_284_ap_start_reg = 1'b0;
#0 grp_rotate_right_fu_291_ap_start_reg = 1'b0;
#0 ap_return_0_preg = 32'd0;
#0 ap_return_1_preg = 32'd0;
#0 ap_return_2_preg = 32'd0;
#0 ap_return_3_preg = 32'd0;
#0 ap_return_4_preg = 32'd0;
#0 ap_return_5_preg = 32'd0;
#0 ap_return_6_preg = 32'd0;
#0 ap_return_7_preg = 32'd0;
#0 ap_return_8_preg = 32'd0;
#0 ap_return_9_preg = 32'd0;
#0 ap_return_10_preg = 32'd0;
#0 ap_return_11_preg = 32'd0;
#0 ap_return_12_preg = 32'd0;
#0 ap_return_13_preg = 32'd0;
#0 ap_return_14_preg = 32'd0;
#0 ap_return_15_preg = 32'd0;
end

compress_rotate_right grp_rotate_right_fu_270(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_rotate_right_fu_270_ap_start),
    .ap_done(grp_rotate_right_fu_270_ap_done),
    .ap_idle(grp_rotate_right_fu_270_ap_idle),
    .ap_ready(grp_rotate_right_fu_270_ap_ready),
    .x(grp_rotate_right_fu_270_x),
    .n(grp_rotate_right_fu_270_n),
    .ap_return(grp_rotate_right_fu_270_ap_return)
);

compress_rotate_right grp_rotate_right_fu_277(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_rotate_right_fu_277_ap_start),
    .ap_done(grp_rotate_right_fu_277_ap_done),
    .ap_idle(grp_rotate_right_fu_277_ap_idle),
    .ap_ready(grp_rotate_right_fu_277_ap_ready),
    .x(grp_rotate_right_fu_277_x),
    .n(grp_rotate_right_fu_277_n),
    .ap_return(grp_rotate_right_fu_277_ap_return)
);

compress_rotate_right grp_rotate_right_fu_284(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_rotate_right_fu_284_ap_start),
    .ap_done(grp_rotate_right_fu_284_ap_done),
    .ap_idle(grp_rotate_right_fu_284_ap_idle),
    .ap_ready(grp_rotate_right_fu_284_ap_ready),
    .x(grp_rotate_right_fu_284_x),
    .n(grp_rotate_right_fu_284_n),
    .ap_return(grp_rotate_right_fu_284_ap_return)
);

compress_rotate_right grp_rotate_right_fu_291(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_rotate_right_fu_291_ap_start),
    .ap_done(grp_rotate_right_fu_291_ap_done),
    .ap_idle(grp_rotate_right_fu_291_ap_idle),
    .ap_ready(grp_rotate_right_fu_291_ap_ready),
    .x(grp_rotate_right_fu_291_x),
    .n(grp_rotate_right_fu_291_n),
    .ap_return(grp_rotate_right_fu_291_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 32'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state24) & (1'b0 == ap_block_state24_on_subcall_done))) begin
            ap_return_0_preg <= add_ln36_4_reg_1166;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_10_preg <= 32'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state24) & (1'b0 == ap_block_state24_on_subcall_done))) begin
            ap_return_10_preg <= add_ln36_5_reg_1210;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_11_preg <= 32'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state24) & (1'b0 == ap_block_state24_on_subcall_done))) begin
            ap_return_11_preg <= add_ln37_5_reg_1216;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_12_preg <= 32'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state24) & (1'b0 == ap_block_state24_on_subcall_done))) begin
            ap_return_12_preg <= reg_314;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_13_preg <= 32'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state24) & (1'b0 == ap_block_state24_on_subcall_done))) begin
            ap_return_13_preg <= reg_318;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_14_preg <= 32'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state24) & (1'b0 == ap_block_state24_on_subcall_done))) begin
            ap_return_14_preg <= reg_322;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_15_preg <= 32'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state24) & (1'b0 == ap_block_state24_on_subcall_done))) begin
            ap_return_15_preg <= reg_310;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 32'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state24) & (1'b0 == ap_block_state24_on_subcall_done))) begin
            ap_return_1_preg <= add_ln37_4_reg_1172;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_2_preg <= 32'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state24) & (1'b0 == ap_block_state24_on_subcall_done))) begin
            ap_return_2_preg <= add_ln38_4_reg_1178;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_3_preg <= 32'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state24) & (1'b0 == ap_block_state24_on_subcall_done))) begin
            ap_return_3_preg <= add_ln39_4_reg_1184;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_4_preg <= 32'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state24) & (1'b0 == ap_block_state24_on_subcall_done))) begin
            ap_return_4_preg <= grp_rotate_right_fu_291_ap_return;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_5_preg <= 32'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state24) & (1'b0 == ap_block_state24_on_subcall_done))) begin
            ap_return_5_preg <= grp_rotate_right_fu_270_ap_return;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_6_preg <= 32'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state24) & (1'b0 == ap_block_state24_on_subcall_done))) begin
            ap_return_6_preg <= grp_rotate_right_fu_277_ap_return;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_7_preg <= 32'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state24) & (1'b0 == ap_block_state24_on_subcall_done))) begin
            ap_return_7_preg <= grp_rotate_right_fu_284_ap_return;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_8_preg <= 32'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state24) & (1'b0 == ap_block_state24_on_subcall_done))) begin
            ap_return_8_preg <= add_ln38_5_reg_1222;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_9_preg <= 32'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state24) & (1'b0 == ap_block_state24_on_subcall_done))) begin
            ap_return_9_preg <= add_ln39_5_reg_1228;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_rotate_right_fu_270_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state2))) begin
            grp_rotate_right_fu_270_ap_start_reg <= 1'b1;
        end else if ((grp_rotate_right_fu_270_ap_ready == 1'b1)) begin
            grp_rotate_right_fu_270_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_rotate_right_fu_277_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state2))) begin
            grp_rotate_right_fu_277_ap_start_reg <= 1'b1;
        end else if ((grp_rotate_right_fu_277_ap_ready == 1'b1)) begin
            grp_rotate_right_fu_277_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_rotate_right_fu_284_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state2))) begin
            grp_rotate_right_fu_284_ap_start_reg <= 1'b1;
        end else if ((grp_rotate_right_fu_284_ap_ready == 1'b1)) begin
            grp_rotate_right_fu_284_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_rotate_right_fu_291_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state2))) begin
            grp_rotate_right_fu_291_ap_start_reg <= 1'b1;
        end else if ((grp_rotate_right_fu_291_ap_ready == 1'b1)) begin
            grp_rotate_right_fu_291_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        add_ln30_1_reg_902 <= add_ln30_1_fu_348_p2;
        add_ln31_1_reg_908 <= add_ln31_1_fu_360_p2;
        add_ln32_1_reg_914 <= add_ln32_1_fu_372_p2;
        add_ln33_1_reg_920 <= add_ln33_1_fu_384_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln30_2_reg_946 <= add_ln30_2_fu_414_p2;
        add_ln31_2_reg_952 <= add_ln31_2_fu_420_p2;
        add_ln32_2_reg_958 <= add_ln32_2_fu_426_p2;
        add_ln33_2_reg_964 <= add_ln33_2_fu_432_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        add_ln30_4_reg_990 <= add_ln30_4_fu_464_p2;
        add_ln31_4_reg_996 <= add_ln31_4_fu_475_p2;
        add_ln32_4_reg_1002 <= add_ln32_4_fu_486_p2;
        add_ln33_4_reg_1008 <= add_ln33_4_fu_497_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        add_ln30_5_reg_1034 <= add_ln30_5_fu_526_p2;
        add_ln31_5_reg_1040 <= add_ln31_5_fu_531_p2;
        add_ln32_5_reg_1046 <= add_ln32_5_fu_536_p2;
        add_ln33_5_reg_1052 <= add_ln33_5_fu_541_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        add_ln36_1_reg_1078 <= add_ln36_1_fu_576_p2;
        add_ln37_1_reg_1084 <= add_ln37_1_fu_587_p2;
        add_ln38_1_reg_1090 <= add_ln38_1_fu_598_p2;
        add_ln39_1_reg_1096 <= add_ln39_1_fu_608_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        add_ln36_2_reg_1122 <= add_ln36_2_fu_638_p2;
        add_ln37_2_reg_1128 <= add_ln37_2_fu_643_p2;
        add_ln38_2_reg_1134 <= add_ln38_2_fu_648_p2;
        add_ln39_2_reg_1140 <= add_ln39_2_fu_653_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        add_ln36_4_reg_1166 <= add_ln36_4_fu_688_p2;
        add_ln37_4_reg_1172 <= add_ln37_4_fu_699_p2;
        add_ln38_4_reg_1178 <= add_ln38_4_fu_710_p2;
        add_ln39_4_reg_1184 <= add_ln39_4_fu_721_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        add_ln36_5_reg_1210 <= add_ln36_5_fu_750_p2;
        add_ln37_5_reg_1216 <= add_ln37_5_fu_755_p2;
        add_ln38_5_reg_1222 <= add_ln38_5_fu_760_p2;
        add_ln39_5_reg_1228 <= add_ln39_5_fu_765_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state9))) begin
        reg_310 <= grp_rotate_right_fu_270_ap_return;
        reg_314 <= grp_rotate_right_fu_277_ap_return;
        reg_318 <= grp_rotate_right_fu_284_ap_return;
        reg_322 <= grp_rotate_right_fu_291_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state6))) begin
        reg_326 <= grp_rotate_right_fu_270_ap_return;
        reg_330 <= grp_rotate_right_fu_277_ap_return;
        reg_334 <= grp_rotate_right_fu_284_ap_return;
        reg_338 <= grp_rotate_right_fu_291_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        xor_ln30_1_reg_970 <= xor_ln30_1_fu_438_p2;
        xor_ln31_1_reg_975 <= xor_ln31_1_fu_443_p2;
        xor_ln32_1_reg_980 <= xor_ln32_1_fu_448_p2;
        xor_ln33_1_reg_985 <= xor_ln33_1_fu_453_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        xor_ln30_2_reg_1014 <= xor_ln30_2_fu_502_p2;
        xor_ln31_2_reg_1019 <= xor_ln31_2_fu_508_p2;
        xor_ln32_2_reg_1024 <= xor_ln32_2_fu_514_p2;
        xor_ln33_2_reg_1029 <= xor_ln33_2_fu_520_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        xor_ln30_3_reg_1058 <= xor_ln30_3_fu_546_p2;
        xor_ln31_3_reg_1063 <= xor_ln31_3_fu_552_p2;
        xor_ln32_3_reg_1068 <= xor_ln32_3_fu_558_p2;
        xor_ln33_3_reg_1073 <= xor_ln33_3_fu_564_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        xor_ln30_reg_926 <= xor_ln30_fu_390_p2;
        xor_ln31_reg_931 <= xor_ln31_fu_396_p2;
        xor_ln32_reg_936 <= xor_ln32_fu_402_p2;
        xor_ln33_reg_941 <= xor_ln33_fu_408_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        xor_ln36_1_reg_1146 <= xor_ln36_1_fu_658_p2;
        xor_ln37_1_reg_1151 <= xor_ln37_1_fu_664_p2;
        xor_ln38_1_reg_1156 <= xor_ln38_1_fu_670_p2;
        xor_ln39_1_reg_1161 <= xor_ln39_1_fu_676_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        xor_ln36_2_reg_1190 <= xor_ln36_2_fu_726_p2;
        xor_ln37_2_reg_1195 <= xor_ln37_2_fu_732_p2;
        xor_ln38_2_reg_1200 <= xor_ln38_2_fu_738_p2;
        xor_ln39_2_reg_1205 <= xor_ln39_2_fu_744_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        xor_ln36_3_reg_1234 <= xor_ln36_3_fu_770_p2;
        xor_ln37_3_reg_1239 <= xor_ln37_3_fu_776_p2;
        xor_ln38_3_reg_1244 <= xor_ln38_3_fu_782_p2;
        xor_ln39_3_reg_1249 <= xor_ln39_3_fu_788_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        xor_ln36_reg_1102 <= xor_ln36_fu_614_p2;
        xor_ln37_reg_1107 <= xor_ln37_fu_620_p2;
        xor_ln38_reg_1112 <= xor_ln38_fu_626_p2;
        xor_ln39_reg_1117 <= xor_ln39_fu_632_p2;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state12_on_subcall_done)) begin
        ap_ST_fsm_state12_blk = 1'b1;
    end else begin
        ap_ST_fsm_state12_blk = 1'b0;
    end
end

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state15_on_subcall_done)) begin
        ap_ST_fsm_state15_blk = 1'b1;
    end else begin
        ap_ST_fsm_state15_blk = 1'b0;
    end
end

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state18_on_subcall_done)) begin
        ap_ST_fsm_state18_blk = 1'b1;
    end else begin
        ap_ST_fsm_state18_blk = 1'b0;
    end
end

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state21_on_subcall_done)) begin
        ap_ST_fsm_state21_blk = 1'b1;
    end else begin
        ap_ST_fsm_state21_blk = 1'b0;
    end
end

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state24_on_subcall_done)) begin
        ap_ST_fsm_state24_blk = 1'b1;
    end else begin
        ap_ST_fsm_state24_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state3_on_subcall_done)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state6_on_subcall_done)) begin
        ap_ST_fsm_state6_blk = 1'b1;
    end else begin
        ap_ST_fsm_state6_blk = 1'b0;
    end
end

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state9_on_subcall_done)) begin
        ap_ST_fsm_state9_blk = 1'b1;
    end else begin
        ap_ST_fsm_state9_blk = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state24) & (1'b0 == ap_block_state24_on_subcall_done)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) & (1'b0 == ap_block_state24_on_subcall_done))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) & (1'b0 == ap_block_state24_on_subcall_done))) begin
        ap_return_0 = add_ln36_4_reg_1166;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) & (1'b0 == ap_block_state24_on_subcall_done))) begin
        ap_return_1 = add_ln37_4_reg_1172;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) & (1'b0 == ap_block_state24_on_subcall_done))) begin
        ap_return_10 = add_ln36_5_reg_1210;
    end else begin
        ap_return_10 = ap_return_10_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) & (1'b0 == ap_block_state24_on_subcall_done))) begin
        ap_return_11 = add_ln37_5_reg_1216;
    end else begin
        ap_return_11 = ap_return_11_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) & (1'b0 == ap_block_state24_on_subcall_done))) begin
        ap_return_12 = reg_314;
    end else begin
        ap_return_12 = ap_return_12_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) & (1'b0 == ap_block_state24_on_subcall_done))) begin
        ap_return_13 = reg_318;
    end else begin
        ap_return_13 = ap_return_13_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) & (1'b0 == ap_block_state24_on_subcall_done))) begin
        ap_return_14 = reg_322;
    end else begin
        ap_return_14 = ap_return_14_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) & (1'b0 == ap_block_state24_on_subcall_done))) begin
        ap_return_15 = reg_310;
    end else begin
        ap_return_15 = ap_return_15_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) & (1'b0 == ap_block_state24_on_subcall_done))) begin
        ap_return_2 = add_ln38_4_reg_1178;
    end else begin
        ap_return_2 = ap_return_2_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) & (1'b0 == ap_block_state24_on_subcall_done))) begin
        ap_return_3 = add_ln39_4_reg_1184;
    end else begin
        ap_return_3 = ap_return_3_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) & (1'b0 == ap_block_state24_on_subcall_done))) begin
        ap_return_4 = grp_rotate_right_fu_291_ap_return;
    end else begin
        ap_return_4 = ap_return_4_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) & (1'b0 == ap_block_state24_on_subcall_done))) begin
        ap_return_5 = grp_rotate_right_fu_270_ap_return;
    end else begin
        ap_return_5 = ap_return_5_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) & (1'b0 == ap_block_state24_on_subcall_done))) begin
        ap_return_6 = grp_rotate_right_fu_277_ap_return;
    end else begin
        ap_return_6 = ap_return_6_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) & (1'b0 == ap_block_state24_on_subcall_done))) begin
        ap_return_7 = grp_rotate_right_fu_284_ap_return;
    end else begin
        ap_return_7 = ap_return_7_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) & (1'b0 == ap_block_state24_on_subcall_done))) begin
        ap_return_8 = add_ln38_5_reg_1222;
    end else begin
        ap_return_8 = ap_return_8_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) & (1'b0 == ap_block_state24_on_subcall_done))) begin
        ap_return_9 = add_ln39_5_reg_1228;
    end else begin
        ap_return_9 = ap_return_9_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state12))) begin
        grp_rotate_right_fu_270_n = 5'd7;
    end else if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state9))) begin
        grp_rotate_right_fu_270_n = 5'd8;
    end else if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state6))) begin
        grp_rotate_right_fu_270_n = 5'd12;
    end else if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state15))) begin
        grp_rotate_right_fu_270_n = 5'd16;
    end else begin
        grp_rotate_right_fu_270_n = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_rotate_right_fu_270_x = xor_ln36_3_reg_1234;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_rotate_right_fu_270_x = xor_ln36_2_reg_1190;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_rotate_right_fu_270_x = xor_ln36_1_reg_1146;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_rotate_right_fu_270_x = xor_ln36_reg_1102;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_rotate_right_fu_270_x = xor_ln30_3_reg_1058;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_rotate_right_fu_270_x = xor_ln30_2_reg_1014;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_rotate_right_fu_270_x = xor_ln30_1_reg_970;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_rotate_right_fu_270_x = xor_ln30_reg_926;
    end else begin
        grp_rotate_right_fu_270_x = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state12))) begin
        grp_rotate_right_fu_277_n = 5'd7;
    end else if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state9))) begin
        grp_rotate_right_fu_277_n = 5'd8;
    end else if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state6))) begin
        grp_rotate_right_fu_277_n = 5'd12;
    end else if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state15))) begin
        grp_rotate_right_fu_277_n = 5'd16;
    end else begin
        grp_rotate_right_fu_277_n = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_rotate_right_fu_277_x = xor_ln37_3_reg_1239;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_rotate_right_fu_277_x = xor_ln37_2_reg_1195;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_rotate_right_fu_277_x = xor_ln37_1_reg_1151;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_rotate_right_fu_277_x = xor_ln37_reg_1107;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_rotate_right_fu_277_x = xor_ln31_3_reg_1063;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_rotate_right_fu_277_x = xor_ln31_2_reg_1019;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_rotate_right_fu_277_x = xor_ln31_1_reg_975;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_rotate_right_fu_277_x = xor_ln31_reg_931;
    end else begin
        grp_rotate_right_fu_277_x = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state12))) begin
        grp_rotate_right_fu_284_n = 5'd7;
    end else if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state9))) begin
        grp_rotate_right_fu_284_n = 5'd8;
    end else if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state6))) begin
        grp_rotate_right_fu_284_n = 5'd12;
    end else if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state15))) begin
        grp_rotate_right_fu_284_n = 5'd16;
    end else begin
        grp_rotate_right_fu_284_n = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_rotate_right_fu_284_x = xor_ln38_3_reg_1244;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_rotate_right_fu_284_x = xor_ln38_2_reg_1200;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_rotate_right_fu_284_x = xor_ln38_1_reg_1156;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_rotate_right_fu_284_x = xor_ln38_reg_1112;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_rotate_right_fu_284_x = xor_ln32_3_reg_1068;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_rotate_right_fu_284_x = xor_ln32_2_reg_1024;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_rotate_right_fu_284_x = xor_ln32_1_reg_980;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_rotate_right_fu_284_x = xor_ln32_reg_936;
    end else begin
        grp_rotate_right_fu_284_x = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state12))) begin
        grp_rotate_right_fu_291_n = 5'd7;
    end else if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state9))) begin
        grp_rotate_right_fu_291_n = 5'd8;
    end else if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state6))) begin
        grp_rotate_right_fu_291_n = 5'd12;
    end else if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state15))) begin
        grp_rotate_right_fu_291_n = 5'd16;
    end else begin
        grp_rotate_right_fu_291_n = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_rotate_right_fu_291_x = xor_ln39_3_reg_1249;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_rotate_right_fu_291_x = xor_ln39_2_reg_1205;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_rotate_right_fu_291_x = xor_ln39_1_reg_1161;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_rotate_right_fu_291_x = xor_ln39_reg_1117;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_rotate_right_fu_291_x = xor_ln33_3_reg_1073;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_rotate_right_fu_291_x = xor_ln33_2_reg_1029;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_rotate_right_fu_291_x = xor_ln33_1_reg_985;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_rotate_right_fu_291_x = xor_ln33_reg_941;
    end else begin
        grp_rotate_right_fu_291_x = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (1'b0 == ap_block_state3_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (1'b0 == ap_block_state6_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (1'b0 == ap_block_state9_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (1'b0 == ap_block_state12_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            if (((1'b1 == ap_CS_fsm_state15) & (1'b0 == ap_block_state15_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            if (((1'b1 == ap_CS_fsm_state18) & (1'b0 == ap_block_state18_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            if (((1'b1 == ap_CS_fsm_state21) & (1'b0 == ap_block_state21_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            if (((1'b1 == ap_CS_fsm_state24) & (1'b0 == ap_block_state24_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln30_1_fu_348_p2 = (add_ln30_fu_342_p2 + state_0_read);

assign add_ln30_2_fu_414_p2 = (reg_310 + state_8_read);

assign add_ln30_3_fu_458_p2 = (reg_326 + m_1_val);

assign add_ln30_4_fu_464_p2 = (add_ln30_3_fu_458_p2 + add_ln30_1_reg_902);

assign add_ln30_5_fu_526_p2 = (reg_310 + add_ln30_2_reg_946);

assign add_ln30_fu_342_p2 = (m_0_val + state_4_read);

assign add_ln31_1_fu_360_p2 = (add_ln31_fu_354_p2 + state_1_read);

assign add_ln31_2_fu_420_p2 = (reg_314 + state_9_read);

assign add_ln31_3_fu_469_p2 = (reg_330 + m_3_val);

assign add_ln31_4_fu_475_p2 = (add_ln31_3_fu_469_p2 + add_ln31_1_reg_908);

assign add_ln31_5_fu_531_p2 = (reg_314 + add_ln31_2_reg_952);

assign add_ln31_fu_354_p2 = (m_2_val + state_5_read);

assign add_ln32_1_fu_372_p2 = (add_ln32_fu_366_p2 + state_2_read);

assign add_ln32_2_fu_426_p2 = (reg_318 + state_10_read);

assign add_ln32_3_fu_480_p2 = (reg_334 + m_5_val);

assign add_ln32_4_fu_486_p2 = (add_ln32_3_fu_480_p2 + add_ln32_1_reg_914);

assign add_ln32_5_fu_536_p2 = (reg_318 + add_ln32_2_reg_958);

assign add_ln32_fu_366_p2 = (m_4_val + state_6_read);

assign add_ln33_1_fu_384_p2 = (add_ln33_fu_378_p2 + state_3_read);

assign add_ln33_2_fu_432_p2 = (reg_322 + state_11_read);

assign add_ln33_3_fu_491_p2 = (reg_338 + m_7_val);

assign add_ln33_4_fu_497_p2 = (add_ln33_3_fu_491_p2 + add_ln33_1_reg_920);

assign add_ln33_5_fu_541_p2 = (reg_322 + add_ln33_2_reg_964);

assign add_ln33_fu_378_p2 = (m_6_val + state_7_read);

assign add_ln36_1_fu_576_p2 = (add_ln36_fu_570_p2 + add_ln30_4_reg_990);

assign add_ln36_2_fu_638_p2 = (reg_310 + add_ln32_5_reg_1046);

assign add_ln36_3_fu_682_p2 = (reg_326 + m_9_val);

assign add_ln36_4_fu_688_p2 = (add_ln36_3_fu_682_p2 + add_ln36_1_reg_1078);

assign add_ln36_5_fu_750_p2 = (reg_310 + add_ln36_2_reg_1122);

assign add_ln36_fu_570_p2 = (reg_330 + m_8_val);

assign add_ln37_1_fu_587_p2 = (add_ln37_fu_581_p2 + add_ln31_4_reg_996);

assign add_ln37_2_fu_643_p2 = (reg_314 + add_ln33_5_reg_1052);

assign add_ln37_3_fu_693_p2 = (reg_330 + m_11_val);

assign add_ln37_4_fu_699_p2 = (add_ln37_3_fu_693_p2 + add_ln37_1_reg_1084);

assign add_ln37_5_fu_755_p2 = (reg_314 + add_ln37_2_reg_1128);

assign add_ln37_fu_581_p2 = (reg_334 + m_10_val);

assign add_ln38_1_fu_598_p2 = (add_ln38_fu_592_p2 + add_ln32_4_reg_1002);

assign add_ln38_2_fu_648_p2 = (reg_318 + add_ln30_5_reg_1034);

assign add_ln38_3_fu_704_p2 = (reg_334 + m_13_val);

assign add_ln38_4_fu_710_p2 = (add_ln38_3_fu_704_p2 + add_ln38_1_reg_1090);

assign add_ln38_5_fu_760_p2 = (reg_318 + add_ln38_2_reg_1134);

assign add_ln38_fu_592_p2 = (reg_338 + m_12_val);

assign add_ln39_1_fu_608_p2 = (add_ln39_fu_603_p2 + reg_326);

assign add_ln39_2_fu_653_p2 = (reg_322 + add_ln31_5_reg_1040);

assign add_ln39_3_fu_715_p2 = (reg_338 + m_15_val);

assign add_ln39_4_fu_721_p2 = (add_ln39_3_fu_715_p2 + add_ln39_1_reg_1096);

assign add_ln39_5_fu_765_p2 = (reg_322 + add_ln39_2_reg_1140);

assign add_ln39_fu_603_p2 = (add_ln33_4_reg_1008 + m_14_val);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state12_on_subcall_done = ((grp_rotate_right_fu_291_ap_done == 1'b0) | (grp_rotate_right_fu_284_ap_done == 1'b0) | (grp_rotate_right_fu_277_ap_done == 1'b0) | (grp_rotate_right_fu_270_ap_done == 1'b0));
end

always @ (*) begin
    ap_block_state15_on_subcall_done = ((grp_rotate_right_fu_291_ap_done == 1'b0) | (grp_rotate_right_fu_284_ap_done == 1'b0) | (grp_rotate_right_fu_277_ap_done == 1'b0) | (grp_rotate_right_fu_270_ap_done == 1'b0));
end

always @ (*) begin
    ap_block_state18_on_subcall_done = ((grp_rotate_right_fu_291_ap_done == 1'b0) | (grp_rotate_right_fu_284_ap_done == 1'b0) | (grp_rotate_right_fu_277_ap_done == 1'b0) | (grp_rotate_right_fu_270_ap_done == 1'b0));
end

always @ (*) begin
    ap_block_state21_on_subcall_done = ((grp_rotate_right_fu_291_ap_done == 1'b0) | (grp_rotate_right_fu_284_ap_done == 1'b0) | (grp_rotate_right_fu_277_ap_done == 1'b0) | (grp_rotate_right_fu_270_ap_done == 1'b0));
end

always @ (*) begin
    ap_block_state24_on_subcall_done = ((grp_rotate_right_fu_291_ap_done == 1'b0) | (grp_rotate_right_fu_284_ap_done == 1'b0) | (grp_rotate_right_fu_277_ap_done == 1'b0) | (grp_rotate_right_fu_270_ap_done == 1'b0));
end

always @ (*) begin
    ap_block_state3_on_subcall_done = ((grp_rotate_right_fu_291_ap_done == 1'b0) | (grp_rotate_right_fu_284_ap_done == 1'b0) | (grp_rotate_right_fu_277_ap_done == 1'b0) | (grp_rotate_right_fu_270_ap_done == 1'b0));
end

always @ (*) begin
    ap_block_state6_on_subcall_done = ((grp_rotate_right_fu_291_ap_done == 1'b0) | (grp_rotate_right_fu_284_ap_done == 1'b0) | (grp_rotate_right_fu_277_ap_done == 1'b0) | (grp_rotate_right_fu_270_ap_done == 1'b0));
end

always @ (*) begin
    ap_block_state9_on_subcall_done = ((grp_rotate_right_fu_291_ap_done == 1'b0) | (grp_rotate_right_fu_284_ap_done == 1'b0) | (grp_rotate_right_fu_277_ap_done == 1'b0) | (grp_rotate_right_fu_270_ap_done == 1'b0));
end

assign grp_rotate_right_fu_270_ap_start = grp_rotate_right_fu_270_ap_start_reg;

assign grp_rotate_right_fu_277_ap_start = grp_rotate_right_fu_277_ap_start_reg;

assign grp_rotate_right_fu_284_ap_start = grp_rotate_right_fu_284_ap_start_reg;

assign grp_rotate_right_fu_291_ap_start = grp_rotate_right_fu_291_ap_start_reg;

assign xor_ln30_1_fu_438_p2 = (state_4_read ^ add_ln30_2_reg_946);

assign xor_ln30_2_fu_502_p2 = (reg_310 ^ add_ln30_4_reg_990);

assign xor_ln30_3_fu_546_p2 = (reg_326 ^ add_ln30_5_reg_1034);

assign xor_ln30_fu_390_p2 = (state_1213_read ^ add_ln30_1_reg_902);

assign xor_ln31_1_fu_443_p2 = (state_5_read ^ add_ln31_2_reg_952);

assign xor_ln31_2_fu_508_p2 = (reg_314 ^ add_ln31_4_reg_996);

assign xor_ln31_3_fu_552_p2 = (reg_330 ^ add_ln31_5_reg_1040);

assign xor_ln31_fu_396_p2 = (state_13_read ^ add_ln31_1_reg_908);

assign xor_ln32_1_fu_448_p2 = (state_6_read ^ add_ln32_2_reg_958);

assign xor_ln32_2_fu_514_p2 = (reg_318 ^ add_ln32_4_reg_1002);

assign xor_ln32_3_fu_558_p2 = (reg_334 ^ add_ln32_5_reg_1046);

assign xor_ln32_fu_402_p2 = (state_14_read ^ add_ln32_1_reg_914);

assign xor_ln33_1_fu_453_p2 = (state_7_read ^ add_ln33_2_reg_964);

assign xor_ln33_2_fu_520_p2 = (reg_322 ^ add_ln33_4_reg_1008);

assign xor_ln33_3_fu_564_p2 = (reg_338 ^ add_ln33_5_reg_1052);

assign xor_ln33_fu_408_p2 = (state_15_read ^ add_ln33_1_reg_920);

assign xor_ln36_1_fu_658_p2 = (reg_330 ^ add_ln36_2_reg_1122);

assign xor_ln36_2_fu_726_p2 = (reg_310 ^ add_ln36_4_reg_1166);

assign xor_ln36_3_fu_770_p2 = (reg_326 ^ add_ln36_5_reg_1210);

assign xor_ln36_fu_614_p2 = (reg_322 ^ add_ln36_1_reg_1078);

assign xor_ln37_1_fu_664_p2 = (reg_334 ^ add_ln37_2_reg_1128);

assign xor_ln37_2_fu_732_p2 = (reg_314 ^ add_ln37_4_reg_1172);

assign xor_ln37_3_fu_776_p2 = (reg_330 ^ add_ln37_5_reg_1216);

assign xor_ln37_fu_620_p2 = (reg_310 ^ add_ln37_1_reg_1084);

assign xor_ln38_1_fu_670_p2 = (reg_338 ^ add_ln38_2_reg_1134);

assign xor_ln38_2_fu_738_p2 = (reg_318 ^ add_ln38_4_reg_1178);

assign xor_ln38_3_fu_782_p2 = (reg_334 ^ add_ln38_5_reg_1222);

assign xor_ln38_fu_626_p2 = (reg_314 ^ add_ln38_1_reg_1090);

assign xor_ln39_1_fu_676_p2 = (reg_326 ^ add_ln39_2_reg_1140);

assign xor_ln39_2_fu_744_p2 = (reg_322 ^ add_ln39_4_reg_1184);

assign xor_ln39_3_fu_788_p2 = (reg_338 ^ add_ln39_5_reg_1228);

assign xor_ln39_fu_632_p2 = (reg_318 ^ add_ln39_1_reg_1096);

endmodule //compress_round_function
