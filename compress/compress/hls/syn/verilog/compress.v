// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="compress_compress,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xck26-sfvc784-2LV-c,HLS_INPUT_CLOCK=3.003000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.492867,HLS_SYN_LAT=261,HLS_SYN_TPT=none,HLS_SYN_MEM=24,HLS_SYN_DSP=0,HLS_SYN_FF=8517,HLS_SYN_LUT=9359,HLS_VERSION=2023_2}" *)

module compress (
        ap_clk,
        ap_rst_n,
        m_axi_data0_AWVALID,
        m_axi_data0_AWREADY,
        m_axi_data0_AWADDR,
        m_axi_data0_AWID,
        m_axi_data0_AWLEN,
        m_axi_data0_AWSIZE,
        m_axi_data0_AWBURST,
        m_axi_data0_AWLOCK,
        m_axi_data0_AWCACHE,
        m_axi_data0_AWPROT,
        m_axi_data0_AWQOS,
        m_axi_data0_AWREGION,
        m_axi_data0_AWUSER,
        m_axi_data0_WVALID,
        m_axi_data0_WREADY,
        m_axi_data0_WDATA,
        m_axi_data0_WSTRB,
        m_axi_data0_WLAST,
        m_axi_data0_WID,
        m_axi_data0_WUSER,
        m_axi_data0_ARVALID,
        m_axi_data0_ARREADY,
        m_axi_data0_ARADDR,
        m_axi_data0_ARID,
        m_axi_data0_ARLEN,
        m_axi_data0_ARSIZE,
        m_axi_data0_ARBURST,
        m_axi_data0_ARLOCK,
        m_axi_data0_ARCACHE,
        m_axi_data0_ARPROT,
        m_axi_data0_ARQOS,
        m_axi_data0_ARREGION,
        m_axi_data0_ARUSER,
        m_axi_data0_RVALID,
        m_axi_data0_RREADY,
        m_axi_data0_RDATA,
        m_axi_data0_RLAST,
        m_axi_data0_RID,
        m_axi_data0_RUSER,
        m_axi_data0_RRESP,
        m_axi_data0_BVALID,
        m_axi_data0_BREADY,
        m_axi_data0_BRESP,
        m_axi_data0_BID,
        m_axi_data0_BUSER,
        m_axi_data1_AWVALID,
        m_axi_data1_AWREADY,
        m_axi_data1_AWADDR,
        m_axi_data1_AWID,
        m_axi_data1_AWLEN,
        m_axi_data1_AWSIZE,
        m_axi_data1_AWBURST,
        m_axi_data1_AWLOCK,
        m_axi_data1_AWCACHE,
        m_axi_data1_AWPROT,
        m_axi_data1_AWQOS,
        m_axi_data1_AWREGION,
        m_axi_data1_AWUSER,
        m_axi_data1_WVALID,
        m_axi_data1_WREADY,
        m_axi_data1_WDATA,
        m_axi_data1_WSTRB,
        m_axi_data1_WLAST,
        m_axi_data1_WID,
        m_axi_data1_WUSER,
        m_axi_data1_ARVALID,
        m_axi_data1_ARREADY,
        m_axi_data1_ARADDR,
        m_axi_data1_ARID,
        m_axi_data1_ARLEN,
        m_axi_data1_ARSIZE,
        m_axi_data1_ARBURST,
        m_axi_data1_ARLOCK,
        m_axi_data1_ARCACHE,
        m_axi_data1_ARPROT,
        m_axi_data1_ARQOS,
        m_axi_data1_ARREGION,
        m_axi_data1_ARUSER,
        m_axi_data1_RVALID,
        m_axi_data1_RREADY,
        m_axi_data1_RDATA,
        m_axi_data1_RLAST,
        m_axi_data1_RID,
        m_axi_data1_RUSER,
        m_axi_data1_RRESP,
        m_axi_data1_BVALID,
        m_axi_data1_BREADY,
        m_axi_data1_BRESP,
        m_axi_data1_BID,
        m_axi_data1_BUSER,
        m_axi_data2_AWVALID,
        m_axi_data2_AWREADY,
        m_axi_data2_AWADDR,
        m_axi_data2_AWID,
        m_axi_data2_AWLEN,
        m_axi_data2_AWSIZE,
        m_axi_data2_AWBURST,
        m_axi_data2_AWLOCK,
        m_axi_data2_AWCACHE,
        m_axi_data2_AWPROT,
        m_axi_data2_AWQOS,
        m_axi_data2_AWREGION,
        m_axi_data2_AWUSER,
        m_axi_data2_WVALID,
        m_axi_data2_WREADY,
        m_axi_data2_WDATA,
        m_axi_data2_WSTRB,
        m_axi_data2_WLAST,
        m_axi_data2_WID,
        m_axi_data2_WUSER,
        m_axi_data2_ARVALID,
        m_axi_data2_ARREADY,
        m_axi_data2_ARADDR,
        m_axi_data2_ARID,
        m_axi_data2_ARLEN,
        m_axi_data2_ARSIZE,
        m_axi_data2_ARBURST,
        m_axi_data2_ARLOCK,
        m_axi_data2_ARCACHE,
        m_axi_data2_ARPROT,
        m_axi_data2_ARQOS,
        m_axi_data2_ARREGION,
        m_axi_data2_ARUSER,
        m_axi_data2_RVALID,
        m_axi_data2_RREADY,
        m_axi_data2_RDATA,
        m_axi_data2_RLAST,
        m_axi_data2_RID,
        m_axi_data2_RUSER,
        m_axi_data2_RRESP,
        m_axi_data2_BVALID,
        m_axi_data2_BREADY,
        m_axi_data2_BRESP,
        m_axi_data2_BID,
        m_axi_data2_BUSER,
        s_axi_ctrl_AWVALID,
        s_axi_ctrl_AWREADY,
        s_axi_ctrl_AWADDR,
        s_axi_ctrl_WVALID,
        s_axi_ctrl_WREADY,
        s_axi_ctrl_WDATA,
        s_axi_ctrl_WSTRB,
        s_axi_ctrl_ARVALID,
        s_axi_ctrl_ARREADY,
        s_axi_ctrl_ARADDR,
        s_axi_ctrl_RVALID,
        s_axi_ctrl_RREADY,
        s_axi_ctrl_RDATA,
        s_axi_ctrl_RRESP,
        s_axi_ctrl_BVALID,
        s_axi_ctrl_BREADY,
        s_axi_ctrl_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 45'd1;
parameter    ap_ST_fsm_state2 = 45'd2;
parameter    ap_ST_fsm_state3 = 45'd4;
parameter    ap_ST_fsm_state4 = 45'd8;
parameter    ap_ST_fsm_state5 = 45'd16;
parameter    ap_ST_fsm_state6 = 45'd32;
parameter    ap_ST_fsm_state7 = 45'd64;
parameter    ap_ST_fsm_state8 = 45'd128;
parameter    ap_ST_fsm_state9 = 45'd256;
parameter    ap_ST_fsm_state10 = 45'd512;
parameter    ap_ST_fsm_state11 = 45'd1024;
parameter    ap_ST_fsm_state12 = 45'd2048;
parameter    ap_ST_fsm_state13 = 45'd4096;
parameter    ap_ST_fsm_state14 = 45'd8192;
parameter    ap_ST_fsm_state15 = 45'd16384;
parameter    ap_ST_fsm_state16 = 45'd32768;
parameter    ap_ST_fsm_state17 = 45'd65536;
parameter    ap_ST_fsm_state18 = 45'd131072;
parameter    ap_ST_fsm_state19 = 45'd262144;
parameter    ap_ST_fsm_state20 = 45'd524288;
parameter    ap_ST_fsm_state21 = 45'd1048576;
parameter    ap_ST_fsm_state22 = 45'd2097152;
parameter    ap_ST_fsm_state23 = 45'd4194304;
parameter    ap_ST_fsm_state24 = 45'd8388608;
parameter    ap_ST_fsm_state25 = 45'd16777216;
parameter    ap_ST_fsm_state26 = 45'd33554432;
parameter    ap_ST_fsm_state27 = 45'd67108864;
parameter    ap_ST_fsm_state28 = 45'd134217728;
parameter    ap_ST_fsm_state29 = 45'd268435456;
parameter    ap_ST_fsm_state30 = 45'd536870912;
parameter    ap_ST_fsm_state31 = 45'd1073741824;
parameter    ap_ST_fsm_state32 = 45'd2147483648;
parameter    ap_ST_fsm_state33 = 45'd4294967296;
parameter    ap_ST_fsm_state34 = 45'd8589934592;
parameter    ap_ST_fsm_state35 = 45'd17179869184;
parameter    ap_ST_fsm_state36 = 45'd34359738368;
parameter    ap_ST_fsm_state37 = 45'd68719476736;
parameter    ap_ST_fsm_state38 = 45'd137438953472;
parameter    ap_ST_fsm_state39 = 45'd274877906944;
parameter    ap_ST_fsm_state40 = 45'd549755813888;
parameter    ap_ST_fsm_state41 = 45'd1099511627776;
parameter    ap_ST_fsm_state42 = 45'd2199023255552;
parameter    ap_ST_fsm_state43 = 45'd4398046511104;
parameter    ap_ST_fsm_state44 = 45'd8796093022208;
parameter    ap_ST_fsm_state45 = 45'd17592186044416;
parameter    C_S_AXI_CTRL_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_DATA0_ID_WIDTH = 1;
parameter    C_M_AXI_DATA0_ADDR_WIDTH = 64;
parameter    C_M_AXI_DATA0_DATA_WIDTH = 64;
parameter    C_M_AXI_DATA0_AWUSER_WIDTH = 1;
parameter    C_M_AXI_DATA0_ARUSER_WIDTH = 1;
parameter    C_M_AXI_DATA0_WUSER_WIDTH = 1;
parameter    C_M_AXI_DATA0_RUSER_WIDTH = 1;
parameter    C_M_AXI_DATA0_BUSER_WIDTH = 1;
parameter    C_M_AXI_DATA0_USER_VALUE = 0;
parameter    C_M_AXI_DATA0_PROT_VALUE = 0;
parameter    C_M_AXI_DATA0_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_DATA1_ID_WIDTH = 1;
parameter    C_M_AXI_DATA1_ADDR_WIDTH = 64;
parameter    C_M_AXI_DATA1_DATA_WIDTH = 64;
parameter    C_M_AXI_DATA1_AWUSER_WIDTH = 1;
parameter    C_M_AXI_DATA1_ARUSER_WIDTH = 1;
parameter    C_M_AXI_DATA1_WUSER_WIDTH = 1;
parameter    C_M_AXI_DATA1_RUSER_WIDTH = 1;
parameter    C_M_AXI_DATA1_BUSER_WIDTH = 1;
parameter    C_M_AXI_DATA1_USER_VALUE = 0;
parameter    C_M_AXI_DATA1_PROT_VALUE = 0;
parameter    C_M_AXI_DATA1_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA2_ID_WIDTH = 1;
parameter    C_M_AXI_DATA2_ADDR_WIDTH = 64;
parameter    C_M_AXI_DATA2_DATA_WIDTH = 64;
parameter    C_M_AXI_DATA2_AWUSER_WIDTH = 1;
parameter    C_M_AXI_DATA2_ARUSER_WIDTH = 1;
parameter    C_M_AXI_DATA2_WUSER_WIDTH = 1;
parameter    C_M_AXI_DATA2_RUSER_WIDTH = 1;
parameter    C_M_AXI_DATA2_BUSER_WIDTH = 1;
parameter    C_M_AXI_DATA2_USER_VALUE = 0;
parameter    C_M_AXI_DATA2_PROT_VALUE = 0;
parameter    C_M_AXI_DATA2_CACHE_VALUE = 3;

parameter C_S_AXI_CTRL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_DATA0_WSTRB_WIDTH = (64 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_DATA1_WSTRB_WIDTH = (64 / 8);
parameter C_M_AXI_DATA2_WSTRB_WIDTH = (64 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_data0_AWVALID;
input   m_axi_data0_AWREADY;
output  [C_M_AXI_DATA0_ADDR_WIDTH - 1:0] m_axi_data0_AWADDR;
output  [C_M_AXI_DATA0_ID_WIDTH - 1:0] m_axi_data0_AWID;
output  [7:0] m_axi_data0_AWLEN;
output  [2:0] m_axi_data0_AWSIZE;
output  [1:0] m_axi_data0_AWBURST;
output  [1:0] m_axi_data0_AWLOCK;
output  [3:0] m_axi_data0_AWCACHE;
output  [2:0] m_axi_data0_AWPROT;
output  [3:0] m_axi_data0_AWQOS;
output  [3:0] m_axi_data0_AWREGION;
output  [C_M_AXI_DATA0_AWUSER_WIDTH - 1:0] m_axi_data0_AWUSER;
output   m_axi_data0_WVALID;
input   m_axi_data0_WREADY;
output  [C_M_AXI_DATA0_DATA_WIDTH - 1:0] m_axi_data0_WDATA;
output  [C_M_AXI_DATA0_WSTRB_WIDTH - 1:0] m_axi_data0_WSTRB;
output   m_axi_data0_WLAST;
output  [C_M_AXI_DATA0_ID_WIDTH - 1:0] m_axi_data0_WID;
output  [C_M_AXI_DATA0_WUSER_WIDTH - 1:0] m_axi_data0_WUSER;
output   m_axi_data0_ARVALID;
input   m_axi_data0_ARREADY;
output  [C_M_AXI_DATA0_ADDR_WIDTH - 1:0] m_axi_data0_ARADDR;
output  [C_M_AXI_DATA0_ID_WIDTH - 1:0] m_axi_data0_ARID;
output  [7:0] m_axi_data0_ARLEN;
output  [2:0] m_axi_data0_ARSIZE;
output  [1:0] m_axi_data0_ARBURST;
output  [1:0] m_axi_data0_ARLOCK;
output  [3:0] m_axi_data0_ARCACHE;
output  [2:0] m_axi_data0_ARPROT;
output  [3:0] m_axi_data0_ARQOS;
output  [3:0] m_axi_data0_ARREGION;
output  [C_M_AXI_DATA0_ARUSER_WIDTH - 1:0] m_axi_data0_ARUSER;
input   m_axi_data0_RVALID;
output   m_axi_data0_RREADY;
input  [C_M_AXI_DATA0_DATA_WIDTH - 1:0] m_axi_data0_RDATA;
input   m_axi_data0_RLAST;
input  [C_M_AXI_DATA0_ID_WIDTH - 1:0] m_axi_data0_RID;
input  [C_M_AXI_DATA0_RUSER_WIDTH - 1:0] m_axi_data0_RUSER;
input  [1:0] m_axi_data0_RRESP;
input   m_axi_data0_BVALID;
output   m_axi_data0_BREADY;
input  [1:0] m_axi_data0_BRESP;
input  [C_M_AXI_DATA0_ID_WIDTH - 1:0] m_axi_data0_BID;
input  [C_M_AXI_DATA0_BUSER_WIDTH - 1:0] m_axi_data0_BUSER;
output   m_axi_data1_AWVALID;
input   m_axi_data1_AWREADY;
output  [C_M_AXI_DATA1_ADDR_WIDTH - 1:0] m_axi_data1_AWADDR;
output  [C_M_AXI_DATA1_ID_WIDTH - 1:0] m_axi_data1_AWID;
output  [7:0] m_axi_data1_AWLEN;
output  [2:0] m_axi_data1_AWSIZE;
output  [1:0] m_axi_data1_AWBURST;
output  [1:0] m_axi_data1_AWLOCK;
output  [3:0] m_axi_data1_AWCACHE;
output  [2:0] m_axi_data1_AWPROT;
output  [3:0] m_axi_data1_AWQOS;
output  [3:0] m_axi_data1_AWREGION;
output  [C_M_AXI_DATA1_AWUSER_WIDTH - 1:0] m_axi_data1_AWUSER;
output   m_axi_data1_WVALID;
input   m_axi_data1_WREADY;
output  [C_M_AXI_DATA1_DATA_WIDTH - 1:0] m_axi_data1_WDATA;
output  [C_M_AXI_DATA1_WSTRB_WIDTH - 1:0] m_axi_data1_WSTRB;
output   m_axi_data1_WLAST;
output  [C_M_AXI_DATA1_ID_WIDTH - 1:0] m_axi_data1_WID;
output  [C_M_AXI_DATA1_WUSER_WIDTH - 1:0] m_axi_data1_WUSER;
output   m_axi_data1_ARVALID;
input   m_axi_data1_ARREADY;
output  [C_M_AXI_DATA1_ADDR_WIDTH - 1:0] m_axi_data1_ARADDR;
output  [C_M_AXI_DATA1_ID_WIDTH - 1:0] m_axi_data1_ARID;
output  [7:0] m_axi_data1_ARLEN;
output  [2:0] m_axi_data1_ARSIZE;
output  [1:0] m_axi_data1_ARBURST;
output  [1:0] m_axi_data1_ARLOCK;
output  [3:0] m_axi_data1_ARCACHE;
output  [2:0] m_axi_data1_ARPROT;
output  [3:0] m_axi_data1_ARQOS;
output  [3:0] m_axi_data1_ARREGION;
output  [C_M_AXI_DATA1_ARUSER_WIDTH - 1:0] m_axi_data1_ARUSER;
input   m_axi_data1_RVALID;
output   m_axi_data1_RREADY;
input  [C_M_AXI_DATA1_DATA_WIDTH - 1:0] m_axi_data1_RDATA;
input   m_axi_data1_RLAST;
input  [C_M_AXI_DATA1_ID_WIDTH - 1:0] m_axi_data1_RID;
input  [C_M_AXI_DATA1_RUSER_WIDTH - 1:0] m_axi_data1_RUSER;
input  [1:0] m_axi_data1_RRESP;
input   m_axi_data1_BVALID;
output   m_axi_data1_BREADY;
input  [1:0] m_axi_data1_BRESP;
input  [C_M_AXI_DATA1_ID_WIDTH - 1:0] m_axi_data1_BID;
input  [C_M_AXI_DATA1_BUSER_WIDTH - 1:0] m_axi_data1_BUSER;
output   m_axi_data2_AWVALID;
input   m_axi_data2_AWREADY;
output  [C_M_AXI_DATA2_ADDR_WIDTH - 1:0] m_axi_data2_AWADDR;
output  [C_M_AXI_DATA2_ID_WIDTH - 1:0] m_axi_data2_AWID;
output  [7:0] m_axi_data2_AWLEN;
output  [2:0] m_axi_data2_AWSIZE;
output  [1:0] m_axi_data2_AWBURST;
output  [1:0] m_axi_data2_AWLOCK;
output  [3:0] m_axi_data2_AWCACHE;
output  [2:0] m_axi_data2_AWPROT;
output  [3:0] m_axi_data2_AWQOS;
output  [3:0] m_axi_data2_AWREGION;
output  [C_M_AXI_DATA2_AWUSER_WIDTH - 1:0] m_axi_data2_AWUSER;
output   m_axi_data2_WVALID;
input   m_axi_data2_WREADY;
output  [C_M_AXI_DATA2_DATA_WIDTH - 1:0] m_axi_data2_WDATA;
output  [C_M_AXI_DATA2_WSTRB_WIDTH - 1:0] m_axi_data2_WSTRB;
output   m_axi_data2_WLAST;
output  [C_M_AXI_DATA2_ID_WIDTH - 1:0] m_axi_data2_WID;
output  [C_M_AXI_DATA2_WUSER_WIDTH - 1:0] m_axi_data2_WUSER;
output   m_axi_data2_ARVALID;
input   m_axi_data2_ARREADY;
output  [C_M_AXI_DATA2_ADDR_WIDTH - 1:0] m_axi_data2_ARADDR;
output  [C_M_AXI_DATA2_ID_WIDTH - 1:0] m_axi_data2_ARID;
output  [7:0] m_axi_data2_ARLEN;
output  [2:0] m_axi_data2_ARSIZE;
output  [1:0] m_axi_data2_ARBURST;
output  [1:0] m_axi_data2_ARLOCK;
output  [3:0] m_axi_data2_ARCACHE;
output  [2:0] m_axi_data2_ARPROT;
output  [3:0] m_axi_data2_ARQOS;
output  [3:0] m_axi_data2_ARREGION;
output  [C_M_AXI_DATA2_ARUSER_WIDTH - 1:0] m_axi_data2_ARUSER;
input   m_axi_data2_RVALID;
output   m_axi_data2_RREADY;
input  [C_M_AXI_DATA2_DATA_WIDTH - 1:0] m_axi_data2_RDATA;
input   m_axi_data2_RLAST;
input  [C_M_AXI_DATA2_ID_WIDTH - 1:0] m_axi_data2_RID;
input  [C_M_AXI_DATA2_RUSER_WIDTH - 1:0] m_axi_data2_RUSER;
input  [1:0] m_axi_data2_RRESP;
input   m_axi_data2_BVALID;
output   m_axi_data2_BREADY;
input  [1:0] m_axi_data2_BRESP;
input  [C_M_AXI_DATA2_ID_WIDTH - 1:0] m_axi_data2_BID;
input  [C_M_AXI_DATA2_BUSER_WIDTH - 1:0] m_axi_data2_BUSER;
input   s_axi_ctrl_AWVALID;
output   s_axi_ctrl_AWREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_ctrl_AWADDR;
input   s_axi_ctrl_WVALID;
output   s_axi_ctrl_WREADY;
input  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_ctrl_WDATA;
input  [C_S_AXI_CTRL_WSTRB_WIDTH - 1:0] s_axi_ctrl_WSTRB;
input   s_axi_ctrl_ARVALID;
output   s_axi_ctrl_ARREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_ctrl_ARADDR;
output   s_axi_ctrl_RVALID;
input   s_axi_ctrl_RREADY;
output  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_ctrl_RDATA;
output  [1:0] s_axi_ctrl_RRESP;
output   s_axi_ctrl_BVALID;
input   s_axi_ctrl_BREADY;
output  [1:0] s_axi_ctrl_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [44:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [63:0] chaining_value;
reg   [63:0] chaining_value_0_data_reg;
reg    chaining_value_0_vld_reg;
reg    chaining_value_0_ack_out;
wire   [63:0] block_words;
reg   [63:0] block_words_0_data_reg;
reg    block_words_0_vld_reg;
reg    block_words_0_ack_out;
wire   [63:0] counter;
reg   [63:0] counter_0_data_reg;
reg    counter_0_vld_reg;
reg    counter_0_ack_out;
wire   [31:0] block_len;
reg   [31:0] block_len_0_data_reg;
reg    block_len_0_vld_reg;
reg    block_len_0_ack_out;
wire   [31:0] flags;
reg   [31:0] flags_0_data_reg;
reg    flags_0_vld_reg;
reg    flags_0_ack_out;
wire   [63:0] out_r;
reg   [63:0] out_r_0_data_reg;
reg    out_r_0_vld_reg;
reg    out_r_0_ack_out;
reg    data0_blk_n_AR;
wire    ap_CS_fsm_state3;
reg    data0_blk_n_R;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
reg    data1_blk_n_AR;
reg    data1_blk_n_R;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state18;
reg    data2_blk_n_AW;
reg    data2_blk_n_W;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state39;
wire    ap_CS_fsm_state40;
reg    data2_blk_n_B;
wire    ap_CS_fsm_state45;
reg   [31:0] reg_366;
wire    ap_CS_fsm_state20;
wire    grp_round_function_fu_242_ap_done;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state30;
reg   [31:0] reg_371;
reg   [31:0] reg_376;
reg   [31:0] reg_381;
reg   [31:0] reg_386;
reg   [31:0] reg_391;
reg   [31:0] reg_396;
reg   [31:0] reg_401;
reg   [31:0] reg_406;
reg   [31:0] reg_411;
reg   [31:0] reg_416;
reg   [31:0] reg_421;
reg   [31:0] reg_426;
reg   [31:0] reg_431;
reg   [31:0] reg_436;
reg   [31:0] reg_441;
reg   [31:0] flags_read_reg_744;
wire    ap_CS_fsm_state2;
reg   [31:0] block_len_read_reg_749;
reg   [60:0] trunc_ln_reg_754;
wire   [31:0] state_8_fu_456_p1;
reg   [31:0] state_8_reg_759;
reg   [31:0] state_9_reg_764;
reg   [60:0] trunc_ln1_reg_769;
reg   [60:0] trunc_ln2_reg_774;
wire   [31:0] state_fu_510_p1;
reg   [31:0] state_reg_791;
reg   [31:0] state_1_reg_797;
wire   [31:0] block_fu_514_p1;
reg   [31:0] block_reg_803;
reg   [31:0] block_16_reg_814;
wire   [31:0] state_2_fu_528_p1;
reg   [31:0] state_2_reg_838;
reg   [31:0] state_3_reg_844;
wire   [31:0] block_17_fu_532_p1;
reg   [31:0] block_17_reg_850;
reg   [31:0] block_18_reg_861;
wire   [31:0] state_4_fu_536_p1;
reg   [31:0] state_4_reg_872;
reg   [31:0] state_5_reg_878;
wire   [31:0] block_19_fu_540_p1;
reg   [31:0] block_19_reg_884;
reg   [31:0] block_20_reg_895;
wire   [31:0] state_6_fu_544_p1;
reg   [31:0] state_6_reg_906;
reg   [31:0] state_7_reg_912;
wire   [31:0] block_21_fu_548_p1;
reg   [31:0] block_21_reg_918;
reg   [31:0] block_22_reg_929;
wire   [31:0] block_23_fu_552_p1;
reg   [31:0] block_23_reg_940;
reg   [31:0] block_24_reg_951;
wire   [31:0] block_25_fu_556_p1;
reg   [31:0] block_25_reg_962;
reg   [31:0] block_26_reg_973;
wire   [31:0] block_27_fu_560_p1;
reg   [31:0] block_27_reg_984;
reg   [31:0] block_28_reg_995;
wire   [31:0] block_29_fu_564_p1;
reg   [31:0] block_29_reg_1006;
reg   [31:0] block_30_reg_1017;
wire   [31:0] xor_ln118_fu_600_p2;
reg   [31:0] xor_ln118_reg_1028;
wire    ap_CS_fsm_state32;
wire   [31:0] xor_ln117_fu_605_p2;
reg   [31:0] xor_ln117_reg_1033;
wire   [31:0] xor_ln118_1_fu_611_p2;
reg   [31:0] xor_ln118_1_reg_1038;
wire   [31:0] xor_ln117_1_fu_616_p2;
reg   [31:0] xor_ln117_1_reg_1043;
wire   [31:0] xor_ln118_2_fu_622_p2;
reg   [31:0] xor_ln118_2_reg_1048;
wire   [31:0] xor_ln117_2_fu_627_p2;
reg   [31:0] xor_ln117_2_reg_1053;
wire   [31:0] xor_ln118_3_fu_633_p2;
reg   [31:0] xor_ln118_3_reg_1058;
wire   [31:0] xor_ln117_3_fu_638_p2;
reg   [31:0] xor_ln117_3_reg_1063;
wire   [31:0] xor_ln118_4_fu_644_p2;
reg   [31:0] xor_ln118_4_reg_1068;
wire   [31:0] xor_ln117_4_fu_649_p2;
reg   [31:0] xor_ln117_4_reg_1073;
wire   [31:0] xor_ln118_5_fu_655_p2;
reg   [31:0] xor_ln118_5_reg_1078;
wire   [31:0] xor_ln117_5_fu_660_p2;
reg   [31:0] xor_ln117_5_reg_1083;
wire   [31:0] xor_ln118_6_fu_666_p2;
reg   [31:0] xor_ln118_6_reg_1088;
wire   [31:0] xor_ln117_6_fu_671_p2;
reg   [31:0] xor_ln117_6_reg_1093;
wire   [31:0] xor_ln117_7_fu_677_p2;
reg   [31:0] xor_ln117_7_reg_1098;
wire   [31:0] xor_ln118_7_fu_683_p2;
reg   [31:0] xor_ln118_7_reg_1103;
wire    grp_round_function_fu_242_ap_start;
wire    grp_round_function_fu_242_ap_idle;
wire    grp_round_function_fu_242_ap_ready;
reg   [31:0] grp_round_function_fu_242_state_0_read;
reg   [31:0] grp_round_function_fu_242_state_1_read;
reg   [31:0] grp_round_function_fu_242_state_2_read;
reg   [31:0] grp_round_function_fu_242_state_3_read;
reg   [31:0] grp_round_function_fu_242_state_4_read;
reg   [31:0] grp_round_function_fu_242_state_5_read;
reg   [31:0] grp_round_function_fu_242_state_6_read;
reg   [31:0] grp_round_function_fu_242_state_7_read;
reg   [31:0] grp_round_function_fu_242_state_8_read;
reg   [31:0] grp_round_function_fu_242_state_9_read;
reg   [31:0] grp_round_function_fu_242_state_10_read;
reg   [31:0] grp_round_function_fu_242_state_11_read;
reg   [31:0] grp_round_function_fu_242_state_1213_read;
reg   [31:0] grp_round_function_fu_242_state_13_read;
reg   [31:0] grp_round_function_fu_242_state_14_read;
reg   [31:0] grp_round_function_fu_242_state_15_read;
reg   [31:0] grp_round_function_fu_242_m_0_val;
reg   [31:0] grp_round_function_fu_242_m_1_val;
reg   [31:0] grp_round_function_fu_242_m_2_val;
reg   [31:0] grp_round_function_fu_242_m_3_val;
reg   [31:0] grp_round_function_fu_242_m_4_val;
reg   [31:0] grp_round_function_fu_242_m_5_val;
reg   [31:0] grp_round_function_fu_242_m_6_val;
reg   [31:0] grp_round_function_fu_242_m_7_val;
reg   [31:0] grp_round_function_fu_242_m_8_val;
reg   [31:0] grp_round_function_fu_242_m_9_val;
reg   [31:0] grp_round_function_fu_242_m_10_val;
reg   [31:0] grp_round_function_fu_242_m_11_val;
reg   [31:0] grp_round_function_fu_242_m_12_val;
reg   [31:0] grp_round_function_fu_242_m_13_val;
reg   [31:0] grp_round_function_fu_242_m_14_val;
reg   [31:0] grp_round_function_fu_242_m_15_val;
wire   [31:0] grp_round_function_fu_242_ap_return_0;
wire   [31:0] grp_round_function_fu_242_ap_return_1;
wire   [31:0] grp_round_function_fu_242_ap_return_2;
wire   [31:0] grp_round_function_fu_242_ap_return_3;
wire   [31:0] grp_round_function_fu_242_ap_return_4;
wire   [31:0] grp_round_function_fu_242_ap_return_5;
wire   [31:0] grp_round_function_fu_242_ap_return_6;
wire   [31:0] grp_round_function_fu_242_ap_return_7;
wire   [31:0] grp_round_function_fu_242_ap_return_8;
wire   [31:0] grp_round_function_fu_242_ap_return_9;
wire   [31:0] grp_round_function_fu_242_ap_return_10;
wire   [31:0] grp_round_function_fu_242_ap_return_11;
wire   [31:0] grp_round_function_fu_242_ap_return_12;
wire   [31:0] grp_round_function_fu_242_ap_return_13;
wire   [31:0] grp_round_function_fu_242_ap_return_14;
wire   [31:0] grp_round_function_fu_242_ap_return_15;
wire    data0_AWREADY;
wire    data0_WREADY;
reg    data0_ARVALID;
wire    data0_ARREADY;
wire    data0_RVALID;
reg    data0_RREADY;
wire   [63:0] data0_RDATA;
wire   [8:0] data0_RFIFONUM;
wire    data0_BVALID;
wire    data1_AWREADY;
wire    data1_WREADY;
reg    data1_ARVALID;
wire    data1_ARREADY;
wire    data1_RVALID;
reg    data1_RREADY;
wire   [63:0] data1_RDATA;
wire   [8:0] data1_RFIFONUM;
wire    data1_BVALID;
reg    data2_AWVALID;
wire    data2_AWREADY;
reg    data2_WVALID;
wire    data2_WREADY;
reg   [63:0] data2_WDATA;
wire    data2_ARREADY;
wire    data2_RVALID;
wire   [63:0] data2_RDATA;
wire   [8:0] data2_RFIFONUM;
wire    data2_BVALID;
reg    data2_BREADY;
reg    grp_round_function_fu_242_ap_start_reg;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state31;
wire   [63:0] sext_ln77_fu_490_p1;
wire   [63:0] sext_ln98_fu_500_p1;
wire   [63:0] sext_ln126_fu_518_p1;
reg    ap_block_state3_io;
reg    ap_block_state11;
reg    ap_block_state12;
reg    ap_block_state13;
reg    ap_block_state14;
wire   [63:0] tmp_fu_688_p3;
wire   [63:0] tmp_s_fu_695_p3;
wire   [63:0] tmp_23_fu_702_p3;
wire   [63:0] tmp_24_fu_709_p3;
wire   [63:0] tmp_25_fu_716_p3;
wire   [63:0] tmp_26_fu_723_p3;
wire   [63:0] tmp_27_fu_730_p3;
wire   [63:0] tmp_28_fu_737_p3;
reg   [44:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
reg    ap_ST_fsm_state11_blk;
reg    ap_ST_fsm_state12_blk;
reg    ap_ST_fsm_state13_blk;
reg    ap_ST_fsm_state14_blk;
reg    ap_ST_fsm_state15_blk;
reg    ap_ST_fsm_state16_blk;
reg    ap_ST_fsm_state17_blk;
reg    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
reg    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
reg    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
reg    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
reg    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
reg    ap_ST_fsm_state28_blk;
wire    ap_ST_fsm_state29_blk;
reg    ap_ST_fsm_state30_blk;
wire    ap_ST_fsm_state31_blk;
reg    ap_ST_fsm_state32_blk;
reg    ap_ST_fsm_state33_blk;
reg    ap_ST_fsm_state34_blk;
reg    ap_ST_fsm_state35_blk;
reg    ap_ST_fsm_state36_blk;
reg    ap_ST_fsm_state37_blk;
reg    ap_ST_fsm_state38_blk;
reg    ap_ST_fsm_state39_blk;
reg    ap_ST_fsm_state40_blk;
wire    ap_ST_fsm_state41_blk;
wire    ap_ST_fsm_state42_blk;
wire    ap_ST_fsm_state43_blk;
wire    ap_ST_fsm_state44_blk;
reg    ap_ST_fsm_state45_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 45'd1;
#0 chaining_value_0_data_reg = 64'd0;
#0 chaining_value_0_vld_reg = 1'b0;
#0 block_words_0_data_reg = 64'd0;
#0 block_words_0_vld_reg = 1'b0;
#0 counter_0_data_reg = 64'd0;
#0 counter_0_vld_reg = 1'b0;
#0 block_len_0_data_reg = 32'd0;
#0 block_len_0_vld_reg = 1'b0;
#0 flags_0_data_reg = 32'd0;
#0 flags_0_vld_reg = 1'b0;
#0 out_r_0_data_reg = 64'd0;
#0 out_r_0_vld_reg = 1'b0;
#0 grp_round_function_fu_242_ap_start_reg = 1'b0;
end

compress_round_function grp_round_function_fu_242(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_round_function_fu_242_ap_start),
    .ap_done(grp_round_function_fu_242_ap_done),
    .ap_idle(grp_round_function_fu_242_ap_idle),
    .ap_ready(grp_round_function_fu_242_ap_ready),
    .state_0_read(grp_round_function_fu_242_state_0_read),
    .state_1_read(grp_round_function_fu_242_state_1_read),
    .state_2_read(grp_round_function_fu_242_state_2_read),
    .state_3_read(grp_round_function_fu_242_state_3_read),
    .state_4_read(grp_round_function_fu_242_state_4_read),
    .state_5_read(grp_round_function_fu_242_state_5_read),
    .state_6_read(grp_round_function_fu_242_state_6_read),
    .state_7_read(grp_round_function_fu_242_state_7_read),
    .state_8_read(grp_round_function_fu_242_state_8_read),
    .state_9_read(grp_round_function_fu_242_state_9_read),
    .state_10_read(grp_round_function_fu_242_state_10_read),
    .state_11_read(grp_round_function_fu_242_state_11_read),
    .state_1213_read(grp_round_function_fu_242_state_1213_read),
    .state_13_read(grp_round_function_fu_242_state_13_read),
    .state_14_read(grp_round_function_fu_242_state_14_read),
    .state_15_read(grp_round_function_fu_242_state_15_read),
    .m_0_val(grp_round_function_fu_242_m_0_val),
    .m_1_val(grp_round_function_fu_242_m_1_val),
    .m_2_val(grp_round_function_fu_242_m_2_val),
    .m_3_val(grp_round_function_fu_242_m_3_val),
    .m_4_val(grp_round_function_fu_242_m_4_val),
    .m_5_val(grp_round_function_fu_242_m_5_val),
    .m_6_val(grp_round_function_fu_242_m_6_val),
    .m_7_val(grp_round_function_fu_242_m_7_val),
    .m_8_val(grp_round_function_fu_242_m_8_val),
    .m_9_val(grp_round_function_fu_242_m_9_val),
    .m_10_val(grp_round_function_fu_242_m_10_val),
    .m_11_val(grp_round_function_fu_242_m_11_val),
    .m_12_val(grp_round_function_fu_242_m_12_val),
    .m_13_val(grp_round_function_fu_242_m_13_val),
    .m_14_val(grp_round_function_fu_242_m_14_val),
    .m_15_val(grp_round_function_fu_242_m_15_val),
    .ap_return_0(grp_round_function_fu_242_ap_return_0),
    .ap_return_1(grp_round_function_fu_242_ap_return_1),
    .ap_return_2(grp_round_function_fu_242_ap_return_2),
    .ap_return_3(grp_round_function_fu_242_ap_return_3),
    .ap_return_4(grp_round_function_fu_242_ap_return_4),
    .ap_return_5(grp_round_function_fu_242_ap_return_5),
    .ap_return_6(grp_round_function_fu_242_ap_return_6),
    .ap_return_7(grp_round_function_fu_242_ap_return_7),
    .ap_return_8(grp_round_function_fu_242_ap_return_8),
    .ap_return_9(grp_round_function_fu_242_ap_return_9),
    .ap_return_10(grp_round_function_fu_242_ap_return_10),
    .ap_return_11(grp_round_function_fu_242_ap_return_11),
    .ap_return_12(grp_round_function_fu_242_ap_return_12),
    .ap_return_13(grp_round_function_fu_242_ap_return_13),
    .ap_return_14(grp_round_function_fu_242_ap_return_14),
    .ap_return_15(grp_round_function_fu_242_ap_return_15)
);

compress_ctrl_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_DATA_WIDTH ))
ctrl_s_axi_U(
    .AWVALID(s_axi_ctrl_AWVALID),
    .AWREADY(s_axi_ctrl_AWREADY),
    .AWADDR(s_axi_ctrl_AWADDR),
    .WVALID(s_axi_ctrl_WVALID),
    .WREADY(s_axi_ctrl_WREADY),
    .WDATA(s_axi_ctrl_WDATA),
    .WSTRB(s_axi_ctrl_WSTRB),
    .ARVALID(s_axi_ctrl_ARVALID),
    .ARREADY(s_axi_ctrl_ARREADY),
    .ARADDR(s_axi_ctrl_ARADDR),
    .RVALID(s_axi_ctrl_RVALID),
    .RREADY(s_axi_ctrl_RREADY),
    .RDATA(s_axi_ctrl_RDATA),
    .RRESP(s_axi_ctrl_RRESP),
    .BVALID(s_axi_ctrl_BVALID),
    .BREADY(s_axi_ctrl_BREADY),
    .BRESP(s_axi_ctrl_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .chaining_value(chaining_value),
    .block_words(block_words),
    .counter(counter),
    .block_len(block_len),
    .flags(flags),
    .out_r(out_r),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

compress_data0_m_axi #(
    .CONSERVATIVE( 1 ),
    .USER_MAXREQS( 7 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_DATA0_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_DATA0_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_DATA0_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_DATA0_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_DATA0_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_DATA0_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_DATA0_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_DATA0_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_DATA0_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_DATA0_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_DATA0_CACHE_VALUE ),
    .USER_RFIFONUM_WIDTH( 9 ),
    .USER_DW( 64 ),
    .USER_AW( 64 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ))
data0_m_axi_U(
    .AWVALID(m_axi_data0_AWVALID),
    .AWREADY(m_axi_data0_AWREADY),
    .AWADDR(m_axi_data0_AWADDR),
    .AWID(m_axi_data0_AWID),
    .AWLEN(m_axi_data0_AWLEN),
    .AWSIZE(m_axi_data0_AWSIZE),
    .AWBURST(m_axi_data0_AWBURST),
    .AWLOCK(m_axi_data0_AWLOCK),
    .AWCACHE(m_axi_data0_AWCACHE),
    .AWPROT(m_axi_data0_AWPROT),
    .AWQOS(m_axi_data0_AWQOS),
    .AWREGION(m_axi_data0_AWREGION),
    .AWUSER(m_axi_data0_AWUSER),
    .WVALID(m_axi_data0_WVALID),
    .WREADY(m_axi_data0_WREADY),
    .WDATA(m_axi_data0_WDATA),
    .WSTRB(m_axi_data0_WSTRB),
    .WLAST(m_axi_data0_WLAST),
    .WID(m_axi_data0_WID),
    .WUSER(m_axi_data0_WUSER),
    .ARVALID(m_axi_data0_ARVALID),
    .ARREADY(m_axi_data0_ARREADY),
    .ARADDR(m_axi_data0_ARADDR),
    .ARID(m_axi_data0_ARID),
    .ARLEN(m_axi_data0_ARLEN),
    .ARSIZE(m_axi_data0_ARSIZE),
    .ARBURST(m_axi_data0_ARBURST),
    .ARLOCK(m_axi_data0_ARLOCK),
    .ARCACHE(m_axi_data0_ARCACHE),
    .ARPROT(m_axi_data0_ARPROT),
    .ARQOS(m_axi_data0_ARQOS),
    .ARREGION(m_axi_data0_ARREGION),
    .ARUSER(m_axi_data0_ARUSER),
    .RVALID(m_axi_data0_RVALID),
    .RREADY(m_axi_data0_RREADY),
    .RDATA(m_axi_data0_RDATA),
    .RLAST(m_axi_data0_RLAST),
    .RID(m_axi_data0_RID),
    .RUSER(m_axi_data0_RUSER),
    .RRESP(m_axi_data0_RRESP),
    .BVALID(m_axi_data0_BVALID),
    .BREADY(m_axi_data0_BREADY),
    .BRESP(m_axi_data0_BRESP),
    .BID(m_axi_data0_BID),
    .BUSER(m_axi_data0_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(data0_ARVALID),
    .I_ARREADY(data0_ARREADY),
    .I_ARADDR(sext_ln77_fu_490_p1),
    .I_ARLEN(32'd4),
    .I_RVALID(data0_RVALID),
    .I_RREADY(data0_RREADY),
    .I_RDATA(data0_RDATA),
    .I_RFIFONUM(data0_RFIFONUM),
    .I_AWVALID(1'b0),
    .I_AWREADY(data0_AWREADY),
    .I_AWADDR(64'd0),
    .I_AWLEN(32'd0),
    .I_WVALID(1'b0),
    .I_WREADY(data0_WREADY),
    .I_WDATA(64'd0),
    .I_WSTRB(8'd0),
    .I_BVALID(data0_BVALID),
    .I_BREADY(1'b0)
);

compress_data1_m_axi #(
    .CONSERVATIVE( 1 ),
    .USER_MAXREQS( 7 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_DATA1_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_DATA1_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_DATA1_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_DATA1_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_DATA1_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_DATA1_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_DATA1_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_DATA1_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_DATA1_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_DATA1_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_DATA1_CACHE_VALUE ),
    .USER_RFIFONUM_WIDTH( 9 ),
    .USER_DW( 64 ),
    .USER_AW( 64 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ))
data1_m_axi_U(
    .AWVALID(m_axi_data1_AWVALID),
    .AWREADY(m_axi_data1_AWREADY),
    .AWADDR(m_axi_data1_AWADDR),
    .AWID(m_axi_data1_AWID),
    .AWLEN(m_axi_data1_AWLEN),
    .AWSIZE(m_axi_data1_AWSIZE),
    .AWBURST(m_axi_data1_AWBURST),
    .AWLOCK(m_axi_data1_AWLOCK),
    .AWCACHE(m_axi_data1_AWCACHE),
    .AWPROT(m_axi_data1_AWPROT),
    .AWQOS(m_axi_data1_AWQOS),
    .AWREGION(m_axi_data1_AWREGION),
    .AWUSER(m_axi_data1_AWUSER),
    .WVALID(m_axi_data1_WVALID),
    .WREADY(m_axi_data1_WREADY),
    .WDATA(m_axi_data1_WDATA),
    .WSTRB(m_axi_data1_WSTRB),
    .WLAST(m_axi_data1_WLAST),
    .WID(m_axi_data1_WID),
    .WUSER(m_axi_data1_WUSER),
    .ARVALID(m_axi_data1_ARVALID),
    .ARREADY(m_axi_data1_ARREADY),
    .ARADDR(m_axi_data1_ARADDR),
    .ARID(m_axi_data1_ARID),
    .ARLEN(m_axi_data1_ARLEN),
    .ARSIZE(m_axi_data1_ARSIZE),
    .ARBURST(m_axi_data1_ARBURST),
    .ARLOCK(m_axi_data1_ARLOCK),
    .ARCACHE(m_axi_data1_ARCACHE),
    .ARPROT(m_axi_data1_ARPROT),
    .ARQOS(m_axi_data1_ARQOS),
    .ARREGION(m_axi_data1_ARREGION),
    .ARUSER(m_axi_data1_ARUSER),
    .RVALID(m_axi_data1_RVALID),
    .RREADY(m_axi_data1_RREADY),
    .RDATA(m_axi_data1_RDATA),
    .RLAST(m_axi_data1_RLAST),
    .RID(m_axi_data1_RID),
    .RUSER(m_axi_data1_RUSER),
    .RRESP(m_axi_data1_RRESP),
    .BVALID(m_axi_data1_BVALID),
    .BREADY(m_axi_data1_BREADY),
    .BRESP(m_axi_data1_BRESP),
    .BID(m_axi_data1_BID),
    .BUSER(m_axi_data1_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(data1_ARVALID),
    .I_ARREADY(data1_ARREADY),
    .I_ARADDR(sext_ln98_fu_500_p1),
    .I_ARLEN(32'd8),
    .I_RVALID(data1_RVALID),
    .I_RREADY(data1_RREADY),
    .I_RDATA(data1_RDATA),
    .I_RFIFONUM(data1_RFIFONUM),
    .I_AWVALID(1'b0),
    .I_AWREADY(data1_AWREADY),
    .I_AWADDR(64'd0),
    .I_AWLEN(32'd0),
    .I_WVALID(1'b0),
    .I_WREADY(data1_WREADY),
    .I_WDATA(64'd0),
    .I_WSTRB(8'd0),
    .I_BVALID(data1_BVALID),
    .I_BREADY(1'b0)
);

compress_data2_m_axi #(
    .CONSERVATIVE( 1 ),
    .USER_MAXREQS( 4 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_DATA2_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_DATA2_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_DATA2_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_DATA2_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_DATA2_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_DATA2_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_DATA2_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_DATA2_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_DATA2_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_DATA2_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_DATA2_CACHE_VALUE ),
    .USER_RFIFONUM_WIDTH( 9 ),
    .USER_DW( 64 ),
    .USER_AW( 64 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ))
data2_m_axi_U(
    .AWVALID(m_axi_data2_AWVALID),
    .AWREADY(m_axi_data2_AWREADY),
    .AWADDR(m_axi_data2_AWADDR),
    .AWID(m_axi_data2_AWID),
    .AWLEN(m_axi_data2_AWLEN),
    .AWSIZE(m_axi_data2_AWSIZE),
    .AWBURST(m_axi_data2_AWBURST),
    .AWLOCK(m_axi_data2_AWLOCK),
    .AWCACHE(m_axi_data2_AWCACHE),
    .AWPROT(m_axi_data2_AWPROT),
    .AWQOS(m_axi_data2_AWQOS),
    .AWREGION(m_axi_data2_AWREGION),
    .AWUSER(m_axi_data2_AWUSER),
    .WVALID(m_axi_data2_WVALID),
    .WREADY(m_axi_data2_WREADY),
    .WDATA(m_axi_data2_WDATA),
    .WSTRB(m_axi_data2_WSTRB),
    .WLAST(m_axi_data2_WLAST),
    .WID(m_axi_data2_WID),
    .WUSER(m_axi_data2_WUSER),
    .ARVALID(m_axi_data2_ARVALID),
    .ARREADY(m_axi_data2_ARREADY),
    .ARADDR(m_axi_data2_ARADDR),
    .ARID(m_axi_data2_ARID),
    .ARLEN(m_axi_data2_ARLEN),
    .ARSIZE(m_axi_data2_ARSIZE),
    .ARBURST(m_axi_data2_ARBURST),
    .ARLOCK(m_axi_data2_ARLOCK),
    .ARCACHE(m_axi_data2_ARCACHE),
    .ARPROT(m_axi_data2_ARPROT),
    .ARQOS(m_axi_data2_ARQOS),
    .ARREGION(m_axi_data2_ARREGION),
    .ARUSER(m_axi_data2_ARUSER),
    .RVALID(m_axi_data2_RVALID),
    .RREADY(m_axi_data2_RREADY),
    .RDATA(m_axi_data2_RDATA),
    .RLAST(m_axi_data2_RLAST),
    .RID(m_axi_data2_RID),
    .RUSER(m_axi_data2_RUSER),
    .RRESP(m_axi_data2_RRESP),
    .BVALID(m_axi_data2_BVALID),
    .BREADY(m_axi_data2_BREADY),
    .BRESP(m_axi_data2_BRESP),
    .BID(m_axi_data2_BID),
    .BUSER(m_axi_data2_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(data2_ARREADY),
    .I_ARADDR(64'd0),
    .I_ARLEN(32'd0),
    .I_RVALID(data2_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(data2_RDATA),
    .I_RFIFONUM(data2_RFIFONUM),
    .I_AWVALID(data2_AWVALID),
    .I_AWREADY(data2_AWREADY),
    .I_AWADDR(sext_ln126_fu_518_p1),
    .I_AWLEN(32'd8),
    .I_WVALID(data2_WVALID),
    .I_WREADY(data2_WREADY),
    .I_WDATA(data2_WDATA),
    .I_WSTRB(8'd255),
    .I_BVALID(data2_BVALID),
    .I_BREADY(data2_BREADY)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_round_function_fu_242_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19))) begin
            grp_round_function_fu_242_ap_start_reg <= 1'b1;
        end else if ((grp_round_function_fu_242_ap_ready == 1'b1)) begin
            grp_round_function_fu_242_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        block_16_reg_814 <= {{data1_RDATA[63:32]}};
        block_reg_803 <= block_fu_514_p1;
        state_1_reg_797 <= {{data0_RDATA[63:32]}};
        state_reg_791 <= state_fu_510_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        block_17_reg_850 <= block_17_fu_532_p1;
        block_18_reg_861 <= {{data1_RDATA[63:32]}};
        state_2_reg_838 <= state_2_fu_528_p1;
        state_3_reg_844 <= {{data0_RDATA[63:32]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        block_19_reg_884 <= block_19_fu_540_p1;
        block_20_reg_895 <= {{data1_RDATA[63:32]}};
        state_4_reg_872 <= state_4_fu_536_p1;
        state_5_reg_878 <= {{data0_RDATA[63:32]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        block_21_reg_918 <= block_21_fu_548_p1;
        block_22_reg_929 <= {{data1_RDATA[63:32]}};
        state_6_reg_906 <= state_6_fu_544_p1;
        state_7_reg_912 <= {{data0_RDATA[63:32]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        block_23_reg_940 <= block_23_fu_552_p1;
        block_24_reg_951 <= {{data1_RDATA[63:32]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        block_25_reg_962 <= block_25_fu_556_p1;
        block_26_reg_973 <= {{data1_RDATA[63:32]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        block_27_reg_984 <= block_27_fu_560_p1;
        block_28_reg_995 <= {{data1_RDATA[63:32]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        block_29_reg_1006 <= block_29_fu_564_p1;
        block_30_reg_1017 <= {{data1_RDATA[63:32]}};
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (block_len_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (block_len_0_vld_reg == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == 1'b1) & (block_len_0_vld_reg == 1'b0)))) begin
        block_len_0_data_reg <= block_len;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        block_len_read_reg_749 <= block_len_0_data_reg;
        flags_read_reg_744 <= flags_0_data_reg;
        state_8_reg_759 <= state_8_fu_456_p1;
        state_9_reg_764 <= {{counter_0_data_reg[63:32]}};
        trunc_ln1_reg_769 <= {{block_words_0_data_reg[63:3]}};
        trunc_ln2_reg_774 <= {{out_r_0_data_reg[63:3]}};
        trunc_ln_reg_754 <= {{chaining_value_0_data_reg[63:3]}};
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (block_words_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (block_words_0_vld_reg == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == 1'b1) & (block_words_0_vld_reg == 1'b0)))) begin
        block_words_0_data_reg <= block_words;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (chaining_value_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (chaining_value_0_vld_reg == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == 1'b1) & (chaining_value_0_vld_reg == 1'b0)))) begin
        chaining_value_0_data_reg <= chaining_value;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (counter_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (counter_0_vld_reg == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == 1'b1) & (counter_0_vld_reg == 1'b0)))) begin
        counter_0_data_reg <= counter;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (flags_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (flags_0_vld_reg == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == 1'b1) & (flags_0_vld_reg == 1'b0)))) begin
        flags_0_data_reg <= flags;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (out_r_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (out_r_0_vld_reg == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == 1'b1) & (out_r_0_vld_reg == 1'b0)))) begin
        out_r_0_data_reg <= out_r;
    end
end

always @ (posedge ap_clk) begin
    if ((((grp_round_function_fu_242_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state30)) | ((grp_round_function_fu_242_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state28)) | ((grp_round_function_fu_242_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state26)) | ((grp_round_function_fu_242_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state24)) | ((grp_round_function_fu_242_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22)) | ((grp_round_function_fu_242_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state20)))) begin
        reg_366 <= grp_round_function_fu_242_ap_return_0;
        reg_371 <= grp_round_function_fu_242_ap_return_1;
        reg_376 <= grp_round_function_fu_242_ap_return_2;
        reg_381 <= grp_round_function_fu_242_ap_return_3;
        reg_386 <= grp_round_function_fu_242_ap_return_4;
        reg_391 <= grp_round_function_fu_242_ap_return_5;
        reg_396 <= grp_round_function_fu_242_ap_return_6;
        reg_401 <= grp_round_function_fu_242_ap_return_7;
        reg_406 <= grp_round_function_fu_242_ap_return_8;
        reg_411 <= grp_round_function_fu_242_ap_return_9;
        reg_416 <= grp_round_function_fu_242_ap_return_10;
        reg_421 <= grp_round_function_fu_242_ap_return_11;
        reg_426 <= grp_round_function_fu_242_ap_return_12;
        reg_431 <= grp_round_function_fu_242_ap_return_13;
        reg_436 <= grp_round_function_fu_242_ap_return_14;
        reg_441 <= grp_round_function_fu_242_ap_return_15;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        xor_ln117_1_reg_1043 <= xor_ln117_1_fu_616_p2;
        xor_ln117_2_reg_1053 <= xor_ln117_2_fu_627_p2;
        xor_ln117_3_reg_1063 <= xor_ln117_3_fu_638_p2;
        xor_ln117_4_reg_1073 <= xor_ln117_4_fu_649_p2;
        xor_ln117_5_reg_1083 <= xor_ln117_5_fu_660_p2;
        xor_ln117_6_reg_1093 <= xor_ln117_6_fu_671_p2;
        xor_ln117_7_reg_1098 <= xor_ln117_7_fu_677_p2;
        xor_ln117_reg_1033 <= xor_ln117_fu_605_p2;
        xor_ln118_1_reg_1038 <= xor_ln118_1_fu_611_p2;
        xor_ln118_2_reg_1048 <= xor_ln118_2_fu_622_p2;
        xor_ln118_3_reg_1058 <= xor_ln118_3_fu_633_p2;
        xor_ln118_4_reg_1068 <= xor_ln118_4_fu_644_p2;
        xor_ln118_5_reg_1078 <= xor_ln118_5_fu_655_p2;
        xor_ln118_6_reg_1088 <= xor_ln118_6_fu_666_p2;
        xor_ln118_7_reg_1103 <= xor_ln118_7_fu_683_p2;
        xor_ln118_reg_1028 <= xor_ln118_fu_600_p2;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

always @ (*) begin
    if (((data2_AWREADY == 1'b0) | (1'b1 == ap_block_state11))) begin
        ap_ST_fsm_state11_blk = 1'b1;
    end else begin
        ap_ST_fsm_state11_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state12)) begin
        ap_ST_fsm_state12_blk = 1'b1;
    end else begin
        ap_ST_fsm_state12_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state13)) begin
        ap_ST_fsm_state13_blk = 1'b1;
    end else begin
        ap_ST_fsm_state13_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state14)) begin
        ap_ST_fsm_state14_blk = 1'b1;
    end else begin
        ap_ST_fsm_state14_blk = 1'b0;
    end
end

always @ (*) begin
    if ((data1_RVALID == 1'b0)) begin
        ap_ST_fsm_state15_blk = 1'b1;
    end else begin
        ap_ST_fsm_state15_blk = 1'b0;
    end
end

always @ (*) begin
    if ((data1_RVALID == 1'b0)) begin
        ap_ST_fsm_state16_blk = 1'b1;
    end else begin
        ap_ST_fsm_state16_blk = 1'b0;
    end
end

always @ (*) begin
    if ((data1_RVALID == 1'b0)) begin
        ap_ST_fsm_state17_blk = 1'b1;
    end else begin
        ap_ST_fsm_state17_blk = 1'b0;
    end
end

always @ (*) begin
    if ((data1_RVALID == 1'b0)) begin
        ap_ST_fsm_state18_blk = 1'b1;
    end else begin
        ap_ST_fsm_state18_blk = 1'b0;
    end
end

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_round_function_fu_242_ap_done == 1'b0)) begin
        ap_ST_fsm_state20_blk = 1'b1;
    end else begin
        ap_ST_fsm_state20_blk = 1'b0;
    end
end

assign ap_ST_fsm_state21_blk = 1'b0;

always @ (*) begin
    if ((grp_round_function_fu_242_ap_done == 1'b0)) begin
        ap_ST_fsm_state22_blk = 1'b1;
    end else begin
        ap_ST_fsm_state22_blk = 1'b0;
    end
end

assign ap_ST_fsm_state23_blk = 1'b0;

always @ (*) begin
    if ((grp_round_function_fu_242_ap_done == 1'b0)) begin
        ap_ST_fsm_state24_blk = 1'b1;
    end else begin
        ap_ST_fsm_state24_blk = 1'b0;
    end
end

assign ap_ST_fsm_state25_blk = 1'b0;

always @ (*) begin
    if ((grp_round_function_fu_242_ap_done == 1'b0)) begin
        ap_ST_fsm_state26_blk = 1'b1;
    end else begin
        ap_ST_fsm_state26_blk = 1'b0;
    end
end

assign ap_ST_fsm_state27_blk = 1'b0;

always @ (*) begin
    if ((grp_round_function_fu_242_ap_done == 1'b0)) begin
        ap_ST_fsm_state28_blk = 1'b1;
    end else begin
        ap_ST_fsm_state28_blk = 1'b0;
    end
end

assign ap_ST_fsm_state29_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_round_function_fu_242_ap_done == 1'b0)) begin
        ap_ST_fsm_state30_blk = 1'b1;
    end else begin
        ap_ST_fsm_state30_blk = 1'b0;
    end
end

assign ap_ST_fsm_state31_blk = 1'b0;

always @ (*) begin
    if ((grp_round_function_fu_242_ap_done == 1'b0)) begin
        ap_ST_fsm_state32_blk = 1'b1;
    end else begin
        ap_ST_fsm_state32_blk = 1'b0;
    end
end

always @ (*) begin
    if ((data2_WREADY == 1'b0)) begin
        ap_ST_fsm_state33_blk = 1'b1;
    end else begin
        ap_ST_fsm_state33_blk = 1'b0;
    end
end

always @ (*) begin
    if ((data2_WREADY == 1'b0)) begin
        ap_ST_fsm_state34_blk = 1'b1;
    end else begin
        ap_ST_fsm_state34_blk = 1'b0;
    end
end

always @ (*) begin
    if ((data2_WREADY == 1'b0)) begin
        ap_ST_fsm_state35_blk = 1'b1;
    end else begin
        ap_ST_fsm_state35_blk = 1'b0;
    end
end

always @ (*) begin
    if ((data2_WREADY == 1'b0)) begin
        ap_ST_fsm_state36_blk = 1'b1;
    end else begin
        ap_ST_fsm_state36_blk = 1'b0;
    end
end

always @ (*) begin
    if ((data2_WREADY == 1'b0)) begin
        ap_ST_fsm_state37_blk = 1'b1;
    end else begin
        ap_ST_fsm_state37_blk = 1'b0;
    end
end

always @ (*) begin
    if ((data2_WREADY == 1'b0)) begin
        ap_ST_fsm_state38_blk = 1'b1;
    end else begin
        ap_ST_fsm_state38_blk = 1'b0;
    end
end

always @ (*) begin
    if ((data2_WREADY == 1'b0)) begin
        ap_ST_fsm_state39_blk = 1'b1;
    end else begin
        ap_ST_fsm_state39_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state3_io)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((data2_WREADY == 1'b0)) begin
        ap_ST_fsm_state40_blk = 1'b1;
    end else begin
        ap_ST_fsm_state40_blk = 1'b0;
    end
end

assign ap_ST_fsm_state41_blk = 1'b0;

assign ap_ST_fsm_state42_blk = 1'b0;

assign ap_ST_fsm_state43_blk = 1'b0;

assign ap_ST_fsm_state44_blk = 1'b0;

always @ (*) begin
    if ((data2_BVALID == 1'b0)) begin
        ap_ST_fsm_state45_blk = 1'b1;
    end else begin
        ap_ST_fsm_state45_blk = 1'b0;
    end
end

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((data2_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state45))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((data2_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state45))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((data2_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state45)))) begin
        block_len_0_ack_out = 1'b1;
    end else begin
        block_len_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((data2_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state45)))) begin
        block_words_0_ack_out = 1'b1;
    end else begin
        block_words_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((data2_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state45)))) begin
        chaining_value_0_ack_out = 1'b1;
    end else begin
        chaining_value_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((data2_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state45)))) begin
        counter_0_ack_out = 1'b1;
    end else begin
        counter_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'b0 == ap_block_state3_io))) begin
        data0_ARVALID = 1'b1;
    end else begin
        data0_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state14) & (1'b0 == ap_block_state14)) | ((1'b1 == ap_CS_fsm_state13) & (1'b0 == ap_block_state13)) | ((1'b1 == ap_CS_fsm_state12) & (1'b0 == ap_block_state12)) | (~((data2_AWREADY == 1'b0) | (1'b1 == ap_block_state11)) & (1'b1 == ap_CS_fsm_state11)))) begin
        data0_RREADY = 1'b1;
    end else begin
        data0_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        data0_blk_n_AR = m_axi_data0_ARREADY;
    end else begin
        data0_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11))) begin
        data0_blk_n_R = m_axi_data0_RVALID;
    end else begin
        data0_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'b0 == ap_block_state3_io))) begin
        data1_ARVALID = 1'b1;
    end else begin
        data1_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state14) & (1'b0 == ap_block_state14)) | ((1'b1 == ap_CS_fsm_state13) & (1'b0 == ap_block_state13)) | ((1'b1 == ap_CS_fsm_state12) & (1'b0 == ap_block_state12)) | ((data1_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state18)) | ((data1_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state17)) | ((data1_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state16)) | ((data1_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state15)) | (~((data2_AWREADY == 1'b0) | (1'b1 == ap_block_state11)) & (1'b1 == ap_CS_fsm_state11)))) begin
        data1_RREADY = 1'b1;
    end else begin
        data1_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        data1_blk_n_AR = m_axi_data1_ARREADY;
    end else begin
        data1_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11))) begin
        data1_blk_n_R = m_axi_data1_RVALID;
    end else begin
        data1_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((~((data2_AWREADY == 1'b0) | (1'b1 == ap_block_state11)) & (1'b1 == ap_CS_fsm_state11))) begin
        data2_AWVALID = 1'b1;
    end else begin
        data2_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((data2_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state45))) begin
        data2_BREADY = 1'b1;
    end else begin
        data2_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        data2_WDATA = tmp_28_fu_737_p3;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        data2_WDATA = tmp_27_fu_730_p3;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        data2_WDATA = tmp_26_fu_723_p3;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        data2_WDATA = tmp_25_fu_716_p3;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        data2_WDATA = tmp_24_fu_709_p3;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        data2_WDATA = tmp_23_fu_702_p3;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        data2_WDATA = tmp_s_fu_695_p3;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        data2_WDATA = tmp_fu_688_p3;
    end else begin
        data2_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((data2_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state40)) | ((data2_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state39)) | ((data2_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state38)) | ((data2_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state37)) | ((data2_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state36)) | ((data2_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state35)) | ((data2_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state34)) | ((data2_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state33)))) begin
        data2_WVALID = 1'b1;
    end else begin
        data2_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        data2_blk_n_AW = m_axi_data2_AWREADY;
    end else begin
        data2_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        data2_blk_n_B = m_axi_data2_BVALID;
    end else begin
        data2_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33))) begin
        data2_blk_n_W = m_axi_data2_WREADY;
    end else begin
        data2_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((data2_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state45)))) begin
        flags_0_ack_out = 1'b1;
    end else begin
        flags_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        grp_round_function_fu_242_m_0_val = block_26_reg_973;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        grp_round_function_fu_242_m_0_val = block_24_reg_951;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        grp_round_function_fu_242_m_0_val = block_27_reg_984;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        grp_round_function_fu_242_m_0_val = block_25_reg_962;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_round_function_fu_242_m_0_val = block_18_reg_861;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_round_function_fu_242_m_0_val = block_17_reg_850;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_round_function_fu_242_m_0_val = block_reg_803;
    end else begin
        grp_round_function_fu_242_m_0_val = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        grp_round_function_fu_242_m_10_val = block_17_reg_850;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        grp_round_function_fu_242_m_10_val = block_reg_803;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        grp_round_function_fu_242_m_10_val = block_20_reg_895;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        grp_round_function_fu_242_m_10_val = block_26_reg_973;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_round_function_fu_242_m_10_val = block_24_reg_951;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_round_function_fu_242_m_10_val = block_27_reg_984;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_round_function_fu_242_m_10_val = block_25_reg_962;
    end else begin
        grp_round_function_fu_242_m_10_val = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        grp_round_function_fu_242_m_11_val = block_27_reg_984;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        grp_round_function_fu_242_m_11_val = block_25_reg_962;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        grp_round_function_fu_242_m_11_val = block_18_reg_861;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        grp_round_function_fu_242_m_11_val = block_17_reg_850;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_round_function_fu_242_m_11_val = block_reg_803;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_round_function_fu_242_m_11_val = block_20_reg_895;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_round_function_fu_242_m_11_val = block_26_reg_973;
    end else begin
        grp_round_function_fu_242_m_11_val = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        grp_round_function_fu_242_m_12_val = block_18_reg_861;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        grp_round_function_fu_242_m_12_val = block_17_reg_850;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        grp_round_function_fu_242_m_12_val = block_reg_803;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        grp_round_function_fu_242_m_12_val = block_20_reg_895;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_round_function_fu_242_m_12_val = block_26_reg_973;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_round_function_fu_242_m_12_val = block_24_reg_951;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_round_function_fu_242_m_12_val = block_27_reg_984;
    end else begin
        grp_round_function_fu_242_m_12_val = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        grp_round_function_fu_242_m_13_val = block_19_reg_884;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        grp_round_function_fu_242_m_13_val = block_21_reg_918;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        grp_round_function_fu_242_m_13_val = block_16_reg_814;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        grp_round_function_fu_242_m_13_val = block_23_reg_940;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_round_function_fu_242_m_13_val = block_30_reg_1017;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_round_function_fu_242_m_13_val = block_29_reg_1006;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_round_function_fu_242_m_13_val = block_28_reg_995;
    end else begin
        grp_round_function_fu_242_m_13_val = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        grp_round_function_fu_242_m_14_val = block_22_reg_929;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        grp_round_function_fu_242_m_14_val = block_19_reg_884;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        grp_round_function_fu_242_m_14_val = block_21_reg_918;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        grp_round_function_fu_242_m_14_val = block_16_reg_814;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_round_function_fu_242_m_14_val = block_23_reg_940;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_round_function_fu_242_m_14_val = block_30_reg_1017;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_round_function_fu_242_m_14_val = block_29_reg_1006;
    end else begin
        grp_round_function_fu_242_m_14_val = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        grp_round_function_fu_242_m_15_val = block_28_reg_995;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        grp_round_function_fu_242_m_15_val = block_22_reg_929;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        grp_round_function_fu_242_m_15_val = block_19_reg_884;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        grp_round_function_fu_242_m_15_val = block_21_reg_918;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_round_function_fu_242_m_15_val = block_16_reg_814;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_round_function_fu_242_m_15_val = block_23_reg_940;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_round_function_fu_242_m_15_val = block_30_reg_1017;
    end else begin
        grp_round_function_fu_242_m_15_val = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        grp_round_function_fu_242_m_1_val = block_30_reg_1017;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        grp_round_function_fu_242_m_1_val = block_29_reg_1006;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        grp_round_function_fu_242_m_1_val = block_28_reg_995;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        grp_round_function_fu_242_m_1_val = block_22_reg_929;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_round_function_fu_242_m_1_val = block_19_reg_884;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_round_function_fu_242_m_1_val = block_21_reg_918;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_round_function_fu_242_m_1_val = block_16_reg_814;
    end else begin
        grp_round_function_fu_242_m_1_val = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        grp_round_function_fu_242_m_2_val = block_20_reg_895;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        grp_round_function_fu_242_m_2_val = block_26_reg_973;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        grp_round_function_fu_242_m_2_val = block_24_reg_951;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        grp_round_function_fu_242_m_2_val = block_27_reg_984;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_round_function_fu_242_m_2_val = block_25_reg_962;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_round_function_fu_242_m_2_val = block_18_reg_861;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_round_function_fu_242_m_2_val = block_17_reg_850;
    end else begin
        grp_round_function_fu_242_m_2_val = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        grp_round_function_fu_242_m_3_val = block_reg_803;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        grp_round_function_fu_242_m_3_val = block_20_reg_895;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        grp_round_function_fu_242_m_3_val = block_26_reg_973;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        grp_round_function_fu_242_m_3_val = block_24_reg_951;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_round_function_fu_242_m_3_val = block_27_reg_984;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_round_function_fu_242_m_3_val = block_25_reg_962;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_round_function_fu_242_m_3_val = block_18_reg_861;
    end else begin
        grp_round_function_fu_242_m_3_val = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        grp_round_function_fu_242_m_4_val = block_16_reg_814;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        grp_round_function_fu_242_m_4_val = block_23_reg_940;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        grp_round_function_fu_242_m_4_val = block_30_reg_1017;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        grp_round_function_fu_242_m_4_val = block_29_reg_1006;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_round_function_fu_242_m_4_val = block_28_reg_995;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_round_function_fu_242_m_4_val = block_22_reg_929;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_round_function_fu_242_m_4_val = block_19_reg_884;
    end else begin
        grp_round_function_fu_242_m_4_val = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        grp_round_function_fu_242_m_5_val = block_24_reg_951;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        grp_round_function_fu_242_m_5_val = block_27_reg_984;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        grp_round_function_fu_242_m_5_val = block_25_reg_962;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        grp_round_function_fu_242_m_5_val = block_18_reg_861;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_round_function_fu_242_m_5_val = block_17_reg_850;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_round_function_fu_242_m_5_val = block_reg_803;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_round_function_fu_242_m_5_val = block_20_reg_895;
    end else begin
        grp_round_function_fu_242_m_5_val = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        grp_round_function_fu_242_m_6_val = block_23_reg_940;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        grp_round_function_fu_242_m_6_val = block_30_reg_1017;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        grp_round_function_fu_242_m_6_val = block_29_reg_1006;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        grp_round_function_fu_242_m_6_val = block_28_reg_995;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_round_function_fu_242_m_6_val = block_22_reg_929;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_round_function_fu_242_m_6_val = block_19_reg_884;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_round_function_fu_242_m_6_val = block_21_reg_918;
    end else begin
        grp_round_function_fu_242_m_6_val = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        grp_round_function_fu_242_m_7_val = block_21_reg_918;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        grp_round_function_fu_242_m_7_val = block_16_reg_814;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        grp_round_function_fu_242_m_7_val = block_23_reg_940;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        grp_round_function_fu_242_m_7_val = block_30_reg_1017;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_round_function_fu_242_m_7_val = block_29_reg_1006;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_round_function_fu_242_m_7_val = block_28_reg_995;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_round_function_fu_242_m_7_val = block_22_reg_929;
    end else begin
        grp_round_function_fu_242_m_7_val = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        grp_round_function_fu_242_m_8_val = block_29_reg_1006;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        grp_round_function_fu_242_m_8_val = block_28_reg_995;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        grp_round_function_fu_242_m_8_val = block_22_reg_929;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        grp_round_function_fu_242_m_8_val = block_19_reg_884;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_round_function_fu_242_m_8_val = block_21_reg_918;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_round_function_fu_242_m_8_val = block_16_reg_814;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_round_function_fu_242_m_8_val = block_23_reg_940;
    end else begin
        grp_round_function_fu_242_m_8_val = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        grp_round_function_fu_242_m_9_val = block_25_reg_962;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        grp_round_function_fu_242_m_9_val = block_18_reg_861;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        grp_round_function_fu_242_m_9_val = block_17_reg_850;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        grp_round_function_fu_242_m_9_val = block_reg_803;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_round_function_fu_242_m_9_val = block_20_reg_895;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_round_function_fu_242_m_9_val = block_26_reg_973;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_round_function_fu_242_m_9_val = block_24_reg_951;
    end else begin
        grp_round_function_fu_242_m_9_val = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_round_function_fu_242_state_0_read = reg_366;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_round_function_fu_242_state_0_read = state_reg_791;
    end else begin
        grp_round_function_fu_242_state_0_read = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_round_function_fu_242_state_10_read = reg_416;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_round_function_fu_242_state_10_read = 32'd1013904242;
    end else begin
        grp_round_function_fu_242_state_10_read = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_round_function_fu_242_state_11_read = reg_421;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_round_function_fu_242_state_11_read = 32'd2773480762;
    end else begin
        grp_round_function_fu_242_state_11_read = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_round_function_fu_242_state_1213_read = reg_426;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_round_function_fu_242_state_1213_read = state_8_reg_759;
    end else begin
        grp_round_function_fu_242_state_1213_read = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_round_function_fu_242_state_13_read = reg_431;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_round_function_fu_242_state_13_read = state_9_reg_764;
    end else begin
        grp_round_function_fu_242_state_13_read = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_round_function_fu_242_state_14_read = reg_436;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_round_function_fu_242_state_14_read = block_len_read_reg_749;
    end else begin
        grp_round_function_fu_242_state_14_read = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_round_function_fu_242_state_15_read = reg_441;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_round_function_fu_242_state_15_read = flags_read_reg_744;
    end else begin
        grp_round_function_fu_242_state_15_read = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_round_function_fu_242_state_1_read = reg_371;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_round_function_fu_242_state_1_read = state_1_reg_797;
    end else begin
        grp_round_function_fu_242_state_1_read = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_round_function_fu_242_state_2_read = reg_376;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_round_function_fu_242_state_2_read = state_2_reg_838;
    end else begin
        grp_round_function_fu_242_state_2_read = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_round_function_fu_242_state_3_read = reg_381;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_round_function_fu_242_state_3_read = state_3_reg_844;
    end else begin
        grp_round_function_fu_242_state_3_read = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_round_function_fu_242_state_4_read = reg_386;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_round_function_fu_242_state_4_read = state_4_reg_872;
    end else begin
        grp_round_function_fu_242_state_4_read = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_round_function_fu_242_state_5_read = reg_391;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_round_function_fu_242_state_5_read = state_5_reg_878;
    end else begin
        grp_round_function_fu_242_state_5_read = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_round_function_fu_242_state_6_read = reg_396;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_round_function_fu_242_state_6_read = state_6_reg_906;
    end else begin
        grp_round_function_fu_242_state_6_read = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_round_function_fu_242_state_7_read = reg_401;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_round_function_fu_242_state_7_read = state_7_reg_912;
    end else begin
        grp_round_function_fu_242_state_7_read = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_round_function_fu_242_state_8_read = reg_406;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_round_function_fu_242_state_8_read = 32'd1779033703;
    end else begin
        grp_round_function_fu_242_state_8_read = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_round_function_fu_242_state_9_read = reg_411;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_round_function_fu_242_state_9_read = 32'd3144134277;
    end else begin
        grp_round_function_fu_242_state_9_read = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((data2_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state45)))) begin
        out_r_0_ack_out = 1'b1;
    end else begin
        out_r_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (1'b0 == ap_block_state3_io))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if ((~((data2_AWREADY == 1'b0) | (1'b1 == ap_block_state11)) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (1'b0 == ap_block_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == ap_CS_fsm_state13) & (1'b0 == ap_block_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((1'b1 == ap_CS_fsm_state14) & (1'b0 == ap_block_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((data1_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((data1_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            if (((data1_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            if (((data1_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            if (((grp_round_function_fu_242_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            if (((grp_round_function_fu_242_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            if (((grp_round_function_fu_242_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            if (((grp_round_function_fu_242_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state26))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            if (((grp_round_function_fu_242_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state28))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            if (((grp_round_function_fu_242_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state30))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            if (((grp_round_function_fu_242_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state32))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        ap_ST_fsm_state33 : begin
            if (((data2_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state33))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        ap_ST_fsm_state34 : begin
            if (((data2_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state34))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        ap_ST_fsm_state35 : begin
            if (((data2_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state35))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_state36 : begin
            if (((data2_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state36))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end
        end
        ap_ST_fsm_state37 : begin
            if (((data2_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state37))) begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end
        end
        ap_ST_fsm_state38 : begin
            if (((data2_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state38))) begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end
        end
        ap_ST_fsm_state39 : begin
            if (((data2_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state39))) begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end
        end
        ap_ST_fsm_state40 : begin
            if (((data2_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state40))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            if (((data2_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state45))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

always @ (*) begin
    ap_block_state11 = ((data1_RVALID == 1'b0) | (data0_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_state12 = ((data1_RVALID == 1'b0) | (data0_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_state13 = ((data1_RVALID == 1'b0) | (data0_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_state14 = ((data1_RVALID == 1'b0) | (data0_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_state3_io = ((data1_ARREADY == 1'b0) | (data0_ARREADY == 1'b0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign block_17_fu_532_p1 = data1_RDATA[31:0];

assign block_19_fu_540_p1 = data1_RDATA[31:0];

assign block_21_fu_548_p1 = data1_RDATA[31:0];

assign block_23_fu_552_p1 = data1_RDATA[31:0];

assign block_25_fu_556_p1 = data1_RDATA[31:0];

assign block_27_fu_560_p1 = data1_RDATA[31:0];

assign block_29_fu_564_p1 = data1_RDATA[31:0];

assign block_fu_514_p1 = data1_RDATA[31:0];

assign grp_round_function_fu_242_ap_start = grp_round_function_fu_242_ap_start_reg;

assign sext_ln126_fu_518_p1 = $signed(trunc_ln2_reg_774);

assign sext_ln77_fu_490_p1 = $signed(trunc_ln_reg_754);

assign sext_ln98_fu_500_p1 = $signed(trunc_ln1_reg_769);

assign state_2_fu_528_p1 = data0_RDATA[31:0];

assign state_4_fu_536_p1 = data0_RDATA[31:0];

assign state_6_fu_544_p1 = data0_RDATA[31:0];

assign state_8_fu_456_p1 = counter_0_data_reg[31:0];

assign state_fu_510_p1 = data0_RDATA[31:0];

assign tmp_23_fu_702_p3 = {{xor_ln117_5_reg_1083}, {xor_ln117_4_reg_1073}};

assign tmp_24_fu_709_p3 = {{xor_ln117_7_reg_1098}, {xor_ln117_6_reg_1093}};

assign tmp_25_fu_716_p3 = {{xor_ln118_1_reg_1038}, {xor_ln118_reg_1028}};

assign tmp_26_fu_723_p3 = {{xor_ln118_3_reg_1058}, {xor_ln118_2_reg_1048}};

assign tmp_27_fu_730_p3 = {{xor_ln118_5_reg_1078}, {xor_ln118_4_reg_1068}};

assign tmp_28_fu_737_p3 = {{xor_ln118_7_reg_1103}, {xor_ln118_6_reg_1088}};

assign tmp_fu_688_p3 = {{xor_ln117_1_reg_1043}, {xor_ln117_reg_1033}};

assign tmp_s_fu_695_p3 = {{xor_ln117_3_reg_1063}, {xor_ln117_2_reg_1053}};

assign xor_ln117_1_fu_616_p2 = (grp_round_function_fu_242_ap_return_9 ^ grp_round_function_fu_242_ap_return_1);

assign xor_ln117_2_fu_627_p2 = (grp_round_function_fu_242_ap_return_2 ^ grp_round_function_fu_242_ap_return_10);

assign xor_ln117_3_fu_638_p2 = (grp_round_function_fu_242_ap_return_3 ^ grp_round_function_fu_242_ap_return_11);

assign xor_ln117_4_fu_649_p2 = (grp_round_function_fu_242_ap_return_4 ^ grp_round_function_fu_242_ap_return_12);

assign xor_ln117_5_fu_660_p2 = (grp_round_function_fu_242_ap_return_5 ^ grp_round_function_fu_242_ap_return_13);

assign xor_ln117_6_fu_671_p2 = (grp_round_function_fu_242_ap_return_6 ^ grp_round_function_fu_242_ap_return_14);

assign xor_ln117_7_fu_677_p2 = (grp_round_function_fu_242_ap_return_7 ^ grp_round_function_fu_242_ap_return_15);

assign xor_ln117_fu_605_p2 = (grp_round_function_fu_242_ap_return_8 ^ grp_round_function_fu_242_ap_return_0);

assign xor_ln118_1_fu_611_p2 = (state_1_reg_797 ^ grp_round_function_fu_242_ap_return_9);

assign xor_ln118_2_fu_622_p2 = (state_2_reg_838 ^ grp_round_function_fu_242_ap_return_10);

assign xor_ln118_3_fu_633_p2 = (state_3_reg_844 ^ grp_round_function_fu_242_ap_return_11);

assign xor_ln118_4_fu_644_p2 = (state_4_reg_872 ^ grp_round_function_fu_242_ap_return_12);

assign xor_ln118_5_fu_655_p2 = (state_5_reg_878 ^ grp_round_function_fu_242_ap_return_13);

assign xor_ln118_6_fu_666_p2 = (state_6_reg_906 ^ grp_round_function_fu_242_ap_return_14);

assign xor_ln118_7_fu_683_p2 = (state_7_reg_912 ^ grp_round_function_fu_242_ap_return_15);

assign xor_ln118_fu_600_p2 = (state_reg_791 ^ grp_round_function_fu_242_ap_return_8);

endmodule //compress
