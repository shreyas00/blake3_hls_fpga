-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity compress is
generic (
    C_M_AXI_DATA0_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_DATA0_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA0_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA0_DATA_WIDTH : INTEGER := 64;
    C_M_AXI_DATA0_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA0_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA0_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA0_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA1_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_DATA1_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA1_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA1_DATA_WIDTH : INTEGER := 64;
    C_M_AXI_DATA1_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA1_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA1_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA1_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA2_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_DATA2_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA2_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA2_DATA_WIDTH : INTEGER := 64;
    C_M_AXI_DATA2_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA2_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA2_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA2_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CTRL_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CTRL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA0_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA0_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA0_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA1_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA1_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA1_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA2_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA2_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA2_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_data0_AWVALID : OUT STD_LOGIC;
    m_axi_data0_AWREADY : IN STD_LOGIC;
    m_axi_data0_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA0_ADDR_WIDTH-1 downto 0);
    m_axi_data0_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA0_ID_WIDTH-1 downto 0);
    m_axi_data0_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data0_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA0_AWUSER_WIDTH-1 downto 0);
    m_axi_data0_WVALID : OUT STD_LOGIC;
    m_axi_data0_WREADY : IN STD_LOGIC;
    m_axi_data0_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA0_DATA_WIDTH-1 downto 0);
    m_axi_data0_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA0_DATA_WIDTH/8-1 downto 0);
    m_axi_data0_WLAST : OUT STD_LOGIC;
    m_axi_data0_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA0_ID_WIDTH-1 downto 0);
    m_axi_data0_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA0_WUSER_WIDTH-1 downto 0);
    m_axi_data0_ARVALID : OUT STD_LOGIC;
    m_axi_data0_ARREADY : IN STD_LOGIC;
    m_axi_data0_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA0_ADDR_WIDTH-1 downto 0);
    m_axi_data0_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA0_ID_WIDTH-1 downto 0);
    m_axi_data0_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data0_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA0_ARUSER_WIDTH-1 downto 0);
    m_axi_data0_RVALID : IN STD_LOGIC;
    m_axi_data0_RREADY : OUT STD_LOGIC;
    m_axi_data0_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA0_DATA_WIDTH-1 downto 0);
    m_axi_data0_RLAST : IN STD_LOGIC;
    m_axi_data0_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA0_ID_WIDTH-1 downto 0);
    m_axi_data0_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA0_RUSER_WIDTH-1 downto 0);
    m_axi_data0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data0_BVALID : IN STD_LOGIC;
    m_axi_data0_BREADY : OUT STD_LOGIC;
    m_axi_data0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data0_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA0_ID_WIDTH-1 downto 0);
    m_axi_data0_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA0_BUSER_WIDTH-1 downto 0);
    m_axi_data1_AWVALID : OUT STD_LOGIC;
    m_axi_data1_AWREADY : IN STD_LOGIC;
    m_axi_data1_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA1_ADDR_WIDTH-1 downto 0);
    m_axi_data1_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA1_ID_WIDTH-1 downto 0);
    m_axi_data1_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data1_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA1_AWUSER_WIDTH-1 downto 0);
    m_axi_data1_WVALID : OUT STD_LOGIC;
    m_axi_data1_WREADY : IN STD_LOGIC;
    m_axi_data1_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA1_DATA_WIDTH-1 downto 0);
    m_axi_data1_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA1_DATA_WIDTH/8-1 downto 0);
    m_axi_data1_WLAST : OUT STD_LOGIC;
    m_axi_data1_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA1_ID_WIDTH-1 downto 0);
    m_axi_data1_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA1_WUSER_WIDTH-1 downto 0);
    m_axi_data1_ARVALID : OUT STD_LOGIC;
    m_axi_data1_ARREADY : IN STD_LOGIC;
    m_axi_data1_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA1_ADDR_WIDTH-1 downto 0);
    m_axi_data1_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA1_ID_WIDTH-1 downto 0);
    m_axi_data1_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data1_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA1_ARUSER_WIDTH-1 downto 0);
    m_axi_data1_RVALID : IN STD_LOGIC;
    m_axi_data1_RREADY : OUT STD_LOGIC;
    m_axi_data1_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA1_DATA_WIDTH-1 downto 0);
    m_axi_data1_RLAST : IN STD_LOGIC;
    m_axi_data1_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA1_ID_WIDTH-1 downto 0);
    m_axi_data1_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA1_RUSER_WIDTH-1 downto 0);
    m_axi_data1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data1_BVALID : IN STD_LOGIC;
    m_axi_data1_BREADY : OUT STD_LOGIC;
    m_axi_data1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data1_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA1_ID_WIDTH-1 downto 0);
    m_axi_data1_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA1_BUSER_WIDTH-1 downto 0);
    m_axi_data2_AWVALID : OUT STD_LOGIC;
    m_axi_data2_AWREADY : IN STD_LOGIC;
    m_axi_data2_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA2_ADDR_WIDTH-1 downto 0);
    m_axi_data2_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA2_ID_WIDTH-1 downto 0);
    m_axi_data2_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data2_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA2_AWUSER_WIDTH-1 downto 0);
    m_axi_data2_WVALID : OUT STD_LOGIC;
    m_axi_data2_WREADY : IN STD_LOGIC;
    m_axi_data2_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA2_DATA_WIDTH-1 downto 0);
    m_axi_data2_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA2_DATA_WIDTH/8-1 downto 0);
    m_axi_data2_WLAST : OUT STD_LOGIC;
    m_axi_data2_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA2_ID_WIDTH-1 downto 0);
    m_axi_data2_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA2_WUSER_WIDTH-1 downto 0);
    m_axi_data2_ARVALID : OUT STD_LOGIC;
    m_axi_data2_ARREADY : IN STD_LOGIC;
    m_axi_data2_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA2_ADDR_WIDTH-1 downto 0);
    m_axi_data2_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA2_ID_WIDTH-1 downto 0);
    m_axi_data2_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data2_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA2_ARUSER_WIDTH-1 downto 0);
    m_axi_data2_RVALID : IN STD_LOGIC;
    m_axi_data2_RREADY : OUT STD_LOGIC;
    m_axi_data2_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA2_DATA_WIDTH-1 downto 0);
    m_axi_data2_RLAST : IN STD_LOGIC;
    m_axi_data2_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA2_ID_WIDTH-1 downto 0);
    m_axi_data2_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA2_RUSER_WIDTH-1 downto 0);
    m_axi_data2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data2_BVALID : IN STD_LOGIC;
    m_axi_data2_BREADY : OUT STD_LOGIC;
    m_axi_data2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data2_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA2_ID_WIDTH-1 downto 0);
    m_axi_data2_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA2_BUSER_WIDTH-1 downto 0);
    s_axi_ctrl_AWVALID : IN STD_LOGIC;
    s_axi_ctrl_AWREADY : OUT STD_LOGIC;
    s_axi_ctrl_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_ctrl_WVALID : IN STD_LOGIC;
    s_axi_ctrl_WREADY : OUT STD_LOGIC;
    s_axi_ctrl_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_ctrl_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH/8-1 downto 0);
    s_axi_ctrl_ARVALID : IN STD_LOGIC;
    s_axi_ctrl_ARREADY : OUT STD_LOGIC;
    s_axi_ctrl_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_ctrl_RVALID : OUT STD_LOGIC;
    s_axi_ctrl_RREADY : IN STD_LOGIC;
    s_axi_ctrl_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_ctrl_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_ctrl_BVALID : OUT STD_LOGIC;
    s_axi_ctrl_BREADY : IN STD_LOGIC;
    s_axi_ctrl_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of compress is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "compress_compress,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xck26-sfvc784-2LV-c,HLS_INPUT_CLOCK=3.003000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.492867,HLS_SYN_LAT=261,HLS_SYN_TPT=none,HLS_SYN_MEM=24,HLS_SYN_DSP=0,HLS_SYN_FF=8517,HLS_SYN_LUT=9359,HLS_VERSION=2023_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (44 downto 0) := "000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (44 downto 0) := "000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (44 downto 0) := "000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (44 downto 0) := "000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (44 downto 0) := "000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (44 downto 0) := "000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (44 downto 0) := "000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (44 downto 0) := "000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (44 downto 0) := "000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (44 downto 0) := "001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (44 downto 0) := "010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (44 downto 0) := "100000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant C_S_AXI_DATA_WIDTH : INTEGER := 32;
    constant C_M_AXI_DATA_WIDTH : INTEGER := 32;
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_6A09E667 : STD_LOGIC_VECTOR (31 downto 0) := "01101010000010011110011001100111";
    constant ap_const_lv32_BB67AE85 : STD_LOGIC_VECTOR (31 downto 0) := "10111011011001111010111010000101";
    constant ap_const_lv32_3C6EF372 : STD_LOGIC_VECTOR (31 downto 0) := "00111100011011101111001101110010";
    constant ap_const_lv32_A54FF53A : STD_LOGIC_VECTOR (31 downto 0) := "10100101010011111111010100111010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal chaining_value : STD_LOGIC_VECTOR (63 downto 0);
    signal chaining_value_0_data_reg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal chaining_value_0_vld_reg : STD_LOGIC := '0';
    signal chaining_value_0_ack_out : STD_LOGIC;
    signal block_words : STD_LOGIC_VECTOR (63 downto 0);
    signal block_words_0_data_reg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal block_words_0_vld_reg : STD_LOGIC := '0';
    signal block_words_0_ack_out : STD_LOGIC;
    signal counter : STD_LOGIC_VECTOR (63 downto 0);
    signal counter_0_data_reg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal counter_0_vld_reg : STD_LOGIC := '0';
    signal counter_0_ack_out : STD_LOGIC;
    signal block_len : STD_LOGIC_VECTOR (31 downto 0);
    signal block_len_0_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal block_len_0_vld_reg : STD_LOGIC := '0';
    signal block_len_0_ack_out : STD_LOGIC;
    signal flags : STD_LOGIC_VECTOR (31 downto 0);
    signal flags_0_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal flags_0_vld_reg : STD_LOGIC := '0';
    signal flags_0_ack_out : STD_LOGIC;
    signal out_r : STD_LOGIC_VECTOR (63 downto 0);
    signal out_r_0_data_reg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal out_r_0_vld_reg : STD_LOGIC := '0';
    signal out_r_0_ack_out : STD_LOGIC;
    signal data0_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal data0_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal data1_blk_n_AR : STD_LOGIC;
    signal data1_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal data2_blk_n_AW : STD_LOGIC;
    signal data2_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal data2_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal reg_366 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal grp_round_function_fu_242_ap_done : STD_LOGIC;
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal reg_371 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_376 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_381 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_386 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_391 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_396 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_401 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_406 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_411 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_416 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_421 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_426 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_431 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_436 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_441 : STD_LOGIC_VECTOR (31 downto 0);
    signal flags_read_reg_744 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal block_len_read_reg_749 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln_reg_754 : STD_LOGIC_VECTOR (60 downto 0);
    signal state_8_fu_456_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal state_8_reg_759 : STD_LOGIC_VECTOR (31 downto 0);
    signal state_9_reg_764 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln1_reg_769 : STD_LOGIC_VECTOR (60 downto 0);
    signal trunc_ln2_reg_774 : STD_LOGIC_VECTOR (60 downto 0);
    signal state_fu_510_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal state_reg_791 : STD_LOGIC_VECTOR (31 downto 0);
    signal state_1_reg_797 : STD_LOGIC_VECTOR (31 downto 0);
    signal block_fu_514_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal block_reg_803 : STD_LOGIC_VECTOR (31 downto 0);
    signal block_16_reg_814 : STD_LOGIC_VECTOR (31 downto 0);
    signal state_2_fu_528_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal state_2_reg_838 : STD_LOGIC_VECTOR (31 downto 0);
    signal state_3_reg_844 : STD_LOGIC_VECTOR (31 downto 0);
    signal block_17_fu_532_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal block_17_reg_850 : STD_LOGIC_VECTOR (31 downto 0);
    signal block_18_reg_861 : STD_LOGIC_VECTOR (31 downto 0);
    signal state_4_fu_536_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal state_4_reg_872 : STD_LOGIC_VECTOR (31 downto 0);
    signal state_5_reg_878 : STD_LOGIC_VECTOR (31 downto 0);
    signal block_19_fu_540_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal block_19_reg_884 : STD_LOGIC_VECTOR (31 downto 0);
    signal block_20_reg_895 : STD_LOGIC_VECTOR (31 downto 0);
    signal state_6_fu_544_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal state_6_reg_906 : STD_LOGIC_VECTOR (31 downto 0);
    signal state_7_reg_912 : STD_LOGIC_VECTOR (31 downto 0);
    signal block_21_fu_548_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal block_21_reg_918 : STD_LOGIC_VECTOR (31 downto 0);
    signal block_22_reg_929 : STD_LOGIC_VECTOR (31 downto 0);
    signal block_23_fu_552_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal block_23_reg_940 : STD_LOGIC_VECTOR (31 downto 0);
    signal block_24_reg_951 : STD_LOGIC_VECTOR (31 downto 0);
    signal block_25_fu_556_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal block_25_reg_962 : STD_LOGIC_VECTOR (31 downto 0);
    signal block_26_reg_973 : STD_LOGIC_VECTOR (31 downto 0);
    signal block_27_fu_560_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal block_27_reg_984 : STD_LOGIC_VECTOR (31 downto 0);
    signal block_28_reg_995 : STD_LOGIC_VECTOR (31 downto 0);
    signal block_29_fu_564_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal block_29_reg_1006 : STD_LOGIC_VECTOR (31 downto 0);
    signal block_30_reg_1017 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln118_fu_600_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln118_reg_1028 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal xor_ln117_fu_605_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln117_reg_1033 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln118_1_fu_611_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln118_1_reg_1038 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln117_1_fu_616_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln117_1_reg_1043 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln118_2_fu_622_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln118_2_reg_1048 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln117_2_fu_627_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln117_2_reg_1053 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln118_3_fu_633_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln118_3_reg_1058 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln117_3_fu_638_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln117_3_reg_1063 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln118_4_fu_644_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln118_4_reg_1068 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln117_4_fu_649_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln117_4_reg_1073 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln118_5_fu_655_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln118_5_reg_1078 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln117_5_fu_660_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln117_5_reg_1083 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln118_6_fu_666_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln118_6_reg_1088 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln117_6_fu_671_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln117_6_reg_1093 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln117_7_fu_677_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln117_7_reg_1098 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln118_7_fu_683_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln118_7_reg_1103 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_round_function_fu_242_ap_start : STD_LOGIC;
    signal grp_round_function_fu_242_ap_idle : STD_LOGIC;
    signal grp_round_function_fu_242_ap_ready : STD_LOGIC;
    signal grp_round_function_fu_242_state_0_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_round_function_fu_242_state_1_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_round_function_fu_242_state_2_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_round_function_fu_242_state_3_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_round_function_fu_242_state_4_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_round_function_fu_242_state_5_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_round_function_fu_242_state_6_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_round_function_fu_242_state_7_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_round_function_fu_242_state_8_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_round_function_fu_242_state_9_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_round_function_fu_242_state_10_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_round_function_fu_242_state_11_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_round_function_fu_242_state_1213_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_round_function_fu_242_state_13_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_round_function_fu_242_state_14_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_round_function_fu_242_state_15_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_round_function_fu_242_m_0_val : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_round_function_fu_242_m_1_val : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_round_function_fu_242_m_2_val : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_round_function_fu_242_m_3_val : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_round_function_fu_242_m_4_val : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_round_function_fu_242_m_5_val : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_round_function_fu_242_m_6_val : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_round_function_fu_242_m_7_val : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_round_function_fu_242_m_8_val : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_round_function_fu_242_m_9_val : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_round_function_fu_242_m_10_val : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_round_function_fu_242_m_11_val : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_round_function_fu_242_m_12_val : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_round_function_fu_242_m_13_val : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_round_function_fu_242_m_14_val : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_round_function_fu_242_m_15_val : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_round_function_fu_242_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_round_function_fu_242_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_round_function_fu_242_ap_return_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_round_function_fu_242_ap_return_3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_round_function_fu_242_ap_return_4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_round_function_fu_242_ap_return_5 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_round_function_fu_242_ap_return_6 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_round_function_fu_242_ap_return_7 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_round_function_fu_242_ap_return_8 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_round_function_fu_242_ap_return_9 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_round_function_fu_242_ap_return_10 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_round_function_fu_242_ap_return_11 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_round_function_fu_242_ap_return_12 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_round_function_fu_242_ap_return_13 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_round_function_fu_242_ap_return_14 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_round_function_fu_242_ap_return_15 : STD_LOGIC_VECTOR (31 downto 0);
    signal data0_AWREADY : STD_LOGIC;
    signal data0_WREADY : STD_LOGIC;
    signal data0_ARVALID : STD_LOGIC;
    signal data0_ARREADY : STD_LOGIC;
    signal data0_RVALID : STD_LOGIC;
    signal data0_RREADY : STD_LOGIC;
    signal data0_RDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal data0_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal data0_BVALID : STD_LOGIC;
    signal data1_AWREADY : STD_LOGIC;
    signal data1_WREADY : STD_LOGIC;
    signal data1_ARVALID : STD_LOGIC;
    signal data1_ARREADY : STD_LOGIC;
    signal data1_RVALID : STD_LOGIC;
    signal data1_RREADY : STD_LOGIC;
    signal data1_RDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal data1_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal data1_BVALID : STD_LOGIC;
    signal data2_AWVALID : STD_LOGIC;
    signal data2_AWREADY : STD_LOGIC;
    signal data2_WVALID : STD_LOGIC;
    signal data2_WREADY : STD_LOGIC;
    signal data2_WDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal data2_ARREADY : STD_LOGIC;
    signal data2_RVALID : STD_LOGIC;
    signal data2_RDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal data2_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal data2_BVALID : STD_LOGIC;
    signal data2_BREADY : STD_LOGIC;
    signal grp_round_function_fu_242_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal sext_ln77_fu_490_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln98_fu_500_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln126_fu_518_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_state11 : BOOLEAN;
    signal ap_block_state12 : BOOLEAN;
    signal ap_block_state13 : BOOLEAN;
    signal ap_block_state14 : BOOLEAN;
    signal tmp_fu_688_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_695_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_23_fu_702_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_24_fu_709_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_25_fu_716_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_26_fu_723_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_27_fu_730_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_28_fu_737_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (44 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component compress_round_function IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_0_read : IN STD_LOGIC_VECTOR (31 downto 0);
        state_1_read : IN STD_LOGIC_VECTOR (31 downto 0);
        state_2_read : IN STD_LOGIC_VECTOR (31 downto 0);
        state_3_read : IN STD_LOGIC_VECTOR (31 downto 0);
        state_4_read : IN STD_LOGIC_VECTOR (31 downto 0);
        state_5_read : IN STD_LOGIC_VECTOR (31 downto 0);
        state_6_read : IN STD_LOGIC_VECTOR (31 downto 0);
        state_7_read : IN STD_LOGIC_VECTOR (31 downto 0);
        state_8_read : IN STD_LOGIC_VECTOR (31 downto 0);
        state_9_read : IN STD_LOGIC_VECTOR (31 downto 0);
        state_10_read : IN STD_LOGIC_VECTOR (31 downto 0);
        state_11_read : IN STD_LOGIC_VECTOR (31 downto 0);
        state_1213_read : IN STD_LOGIC_VECTOR (31 downto 0);
        state_13_read : IN STD_LOGIC_VECTOR (31 downto 0);
        state_14_read : IN STD_LOGIC_VECTOR (31 downto 0);
        state_15_read : IN STD_LOGIC_VECTOR (31 downto 0);
        m_0_val : IN STD_LOGIC_VECTOR (31 downto 0);
        m_1_val : IN STD_LOGIC_VECTOR (31 downto 0);
        m_2_val : IN STD_LOGIC_VECTOR (31 downto 0);
        m_3_val : IN STD_LOGIC_VECTOR (31 downto 0);
        m_4_val : IN STD_LOGIC_VECTOR (31 downto 0);
        m_5_val : IN STD_LOGIC_VECTOR (31 downto 0);
        m_6_val : IN STD_LOGIC_VECTOR (31 downto 0);
        m_7_val : IN STD_LOGIC_VECTOR (31 downto 0);
        m_8_val : IN STD_LOGIC_VECTOR (31 downto 0);
        m_9_val : IN STD_LOGIC_VECTOR (31 downto 0);
        m_10_val : IN STD_LOGIC_VECTOR (31 downto 0);
        m_11_val : IN STD_LOGIC_VECTOR (31 downto 0);
        m_12_val : IN STD_LOGIC_VECTOR (31 downto 0);
        m_13_val : IN STD_LOGIC_VECTOR (31 downto 0);
        m_14_val : IN STD_LOGIC_VECTOR (31 downto 0);
        m_15_val : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_11 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_12 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_13 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_14 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_15 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component compress_ctrl_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        chaining_value : OUT STD_LOGIC_VECTOR (63 downto 0);
        block_words : OUT STD_LOGIC_VECTOR (63 downto 0);
        counter : OUT STD_LOGIC_VECTOR (63 downto 0);
        block_len : OUT STD_LOGIC_VECTOR (31 downto 0);
        flags : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_r : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component compress_data0_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;


    component compress_data1_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;


    component compress_data2_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;



begin
    grp_round_function_fu_242 : component compress_round_function
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_round_function_fu_242_ap_start,
        ap_done => grp_round_function_fu_242_ap_done,
        ap_idle => grp_round_function_fu_242_ap_idle,
        ap_ready => grp_round_function_fu_242_ap_ready,
        state_0_read => grp_round_function_fu_242_state_0_read,
        state_1_read => grp_round_function_fu_242_state_1_read,
        state_2_read => grp_round_function_fu_242_state_2_read,
        state_3_read => grp_round_function_fu_242_state_3_read,
        state_4_read => grp_round_function_fu_242_state_4_read,
        state_5_read => grp_round_function_fu_242_state_5_read,
        state_6_read => grp_round_function_fu_242_state_6_read,
        state_7_read => grp_round_function_fu_242_state_7_read,
        state_8_read => grp_round_function_fu_242_state_8_read,
        state_9_read => grp_round_function_fu_242_state_9_read,
        state_10_read => grp_round_function_fu_242_state_10_read,
        state_11_read => grp_round_function_fu_242_state_11_read,
        state_1213_read => grp_round_function_fu_242_state_1213_read,
        state_13_read => grp_round_function_fu_242_state_13_read,
        state_14_read => grp_round_function_fu_242_state_14_read,
        state_15_read => grp_round_function_fu_242_state_15_read,
        m_0_val => grp_round_function_fu_242_m_0_val,
        m_1_val => grp_round_function_fu_242_m_1_val,
        m_2_val => grp_round_function_fu_242_m_2_val,
        m_3_val => grp_round_function_fu_242_m_3_val,
        m_4_val => grp_round_function_fu_242_m_4_val,
        m_5_val => grp_round_function_fu_242_m_5_val,
        m_6_val => grp_round_function_fu_242_m_6_val,
        m_7_val => grp_round_function_fu_242_m_7_val,
        m_8_val => grp_round_function_fu_242_m_8_val,
        m_9_val => grp_round_function_fu_242_m_9_val,
        m_10_val => grp_round_function_fu_242_m_10_val,
        m_11_val => grp_round_function_fu_242_m_11_val,
        m_12_val => grp_round_function_fu_242_m_12_val,
        m_13_val => grp_round_function_fu_242_m_13_val,
        m_14_val => grp_round_function_fu_242_m_14_val,
        m_15_val => grp_round_function_fu_242_m_15_val,
        ap_return_0 => grp_round_function_fu_242_ap_return_0,
        ap_return_1 => grp_round_function_fu_242_ap_return_1,
        ap_return_2 => grp_round_function_fu_242_ap_return_2,
        ap_return_3 => grp_round_function_fu_242_ap_return_3,
        ap_return_4 => grp_round_function_fu_242_ap_return_4,
        ap_return_5 => grp_round_function_fu_242_ap_return_5,
        ap_return_6 => grp_round_function_fu_242_ap_return_6,
        ap_return_7 => grp_round_function_fu_242_ap_return_7,
        ap_return_8 => grp_round_function_fu_242_ap_return_8,
        ap_return_9 => grp_round_function_fu_242_ap_return_9,
        ap_return_10 => grp_round_function_fu_242_ap_return_10,
        ap_return_11 => grp_round_function_fu_242_ap_return_11,
        ap_return_12 => grp_round_function_fu_242_ap_return_12,
        ap_return_13 => grp_round_function_fu_242_ap_return_13,
        ap_return_14 => grp_round_function_fu_242_ap_return_14,
        ap_return_15 => grp_round_function_fu_242_ap_return_15);

    ctrl_s_axi_U : component compress_ctrl_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_ctrl_AWVALID,
        AWREADY => s_axi_ctrl_AWREADY,
        AWADDR => s_axi_ctrl_AWADDR,
        WVALID => s_axi_ctrl_WVALID,
        WREADY => s_axi_ctrl_WREADY,
        WDATA => s_axi_ctrl_WDATA,
        WSTRB => s_axi_ctrl_WSTRB,
        ARVALID => s_axi_ctrl_ARVALID,
        ARREADY => s_axi_ctrl_ARREADY,
        ARADDR => s_axi_ctrl_ARADDR,
        RVALID => s_axi_ctrl_RVALID,
        RREADY => s_axi_ctrl_RREADY,
        RDATA => s_axi_ctrl_RDATA,
        RRESP => s_axi_ctrl_RRESP,
        BVALID => s_axi_ctrl_BVALID,
        BREADY => s_axi_ctrl_BREADY,
        BRESP => s_axi_ctrl_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        chaining_value => chaining_value,
        block_words => block_words,
        counter => counter,
        block_len => block_len,
        flags => flags,
        out_r => out_r,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    data0_m_axi_U : component compress_data0_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 7,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA0_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA0_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA0_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA0_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA0_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA0_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA0_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA0_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA0_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA0_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA0_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 9,
        USER_DW => 64,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_data0_AWVALID,
        AWREADY => m_axi_data0_AWREADY,
        AWADDR => m_axi_data0_AWADDR,
        AWID => m_axi_data0_AWID,
        AWLEN => m_axi_data0_AWLEN,
        AWSIZE => m_axi_data0_AWSIZE,
        AWBURST => m_axi_data0_AWBURST,
        AWLOCK => m_axi_data0_AWLOCK,
        AWCACHE => m_axi_data0_AWCACHE,
        AWPROT => m_axi_data0_AWPROT,
        AWQOS => m_axi_data0_AWQOS,
        AWREGION => m_axi_data0_AWREGION,
        AWUSER => m_axi_data0_AWUSER,
        WVALID => m_axi_data0_WVALID,
        WREADY => m_axi_data0_WREADY,
        WDATA => m_axi_data0_WDATA,
        WSTRB => m_axi_data0_WSTRB,
        WLAST => m_axi_data0_WLAST,
        WID => m_axi_data0_WID,
        WUSER => m_axi_data0_WUSER,
        ARVALID => m_axi_data0_ARVALID,
        ARREADY => m_axi_data0_ARREADY,
        ARADDR => m_axi_data0_ARADDR,
        ARID => m_axi_data0_ARID,
        ARLEN => m_axi_data0_ARLEN,
        ARSIZE => m_axi_data0_ARSIZE,
        ARBURST => m_axi_data0_ARBURST,
        ARLOCK => m_axi_data0_ARLOCK,
        ARCACHE => m_axi_data0_ARCACHE,
        ARPROT => m_axi_data0_ARPROT,
        ARQOS => m_axi_data0_ARQOS,
        ARREGION => m_axi_data0_ARREGION,
        ARUSER => m_axi_data0_ARUSER,
        RVALID => m_axi_data0_RVALID,
        RREADY => m_axi_data0_RREADY,
        RDATA => m_axi_data0_RDATA,
        RLAST => m_axi_data0_RLAST,
        RID => m_axi_data0_RID,
        RUSER => m_axi_data0_RUSER,
        RRESP => m_axi_data0_RRESP,
        BVALID => m_axi_data0_BVALID,
        BREADY => m_axi_data0_BREADY,
        BRESP => m_axi_data0_BRESP,
        BID => m_axi_data0_BID,
        BUSER => m_axi_data0_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => data0_ARVALID,
        I_ARREADY => data0_ARREADY,
        I_ARADDR => sext_ln77_fu_490_p1,
        I_ARLEN => ap_const_lv32_4,
        I_RVALID => data0_RVALID,
        I_RREADY => data0_RREADY,
        I_RDATA => data0_RDATA,
        I_RFIFONUM => data0_RFIFONUM,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => data0_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWLEN => ap_const_lv32_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => data0_WREADY,
        I_WDATA => ap_const_lv64_0,
        I_WSTRB => ap_const_lv8_0,
        I_BVALID => data0_BVALID,
        I_BREADY => ap_const_logic_0);

    data1_m_axi_U : component compress_data1_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 7,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA1_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA1_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA1_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA1_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA1_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA1_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA1_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA1_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA1_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA1_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA1_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 9,
        USER_DW => 64,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_data1_AWVALID,
        AWREADY => m_axi_data1_AWREADY,
        AWADDR => m_axi_data1_AWADDR,
        AWID => m_axi_data1_AWID,
        AWLEN => m_axi_data1_AWLEN,
        AWSIZE => m_axi_data1_AWSIZE,
        AWBURST => m_axi_data1_AWBURST,
        AWLOCK => m_axi_data1_AWLOCK,
        AWCACHE => m_axi_data1_AWCACHE,
        AWPROT => m_axi_data1_AWPROT,
        AWQOS => m_axi_data1_AWQOS,
        AWREGION => m_axi_data1_AWREGION,
        AWUSER => m_axi_data1_AWUSER,
        WVALID => m_axi_data1_WVALID,
        WREADY => m_axi_data1_WREADY,
        WDATA => m_axi_data1_WDATA,
        WSTRB => m_axi_data1_WSTRB,
        WLAST => m_axi_data1_WLAST,
        WID => m_axi_data1_WID,
        WUSER => m_axi_data1_WUSER,
        ARVALID => m_axi_data1_ARVALID,
        ARREADY => m_axi_data1_ARREADY,
        ARADDR => m_axi_data1_ARADDR,
        ARID => m_axi_data1_ARID,
        ARLEN => m_axi_data1_ARLEN,
        ARSIZE => m_axi_data1_ARSIZE,
        ARBURST => m_axi_data1_ARBURST,
        ARLOCK => m_axi_data1_ARLOCK,
        ARCACHE => m_axi_data1_ARCACHE,
        ARPROT => m_axi_data1_ARPROT,
        ARQOS => m_axi_data1_ARQOS,
        ARREGION => m_axi_data1_ARREGION,
        ARUSER => m_axi_data1_ARUSER,
        RVALID => m_axi_data1_RVALID,
        RREADY => m_axi_data1_RREADY,
        RDATA => m_axi_data1_RDATA,
        RLAST => m_axi_data1_RLAST,
        RID => m_axi_data1_RID,
        RUSER => m_axi_data1_RUSER,
        RRESP => m_axi_data1_RRESP,
        BVALID => m_axi_data1_BVALID,
        BREADY => m_axi_data1_BREADY,
        BRESP => m_axi_data1_BRESP,
        BID => m_axi_data1_BID,
        BUSER => m_axi_data1_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => data1_ARVALID,
        I_ARREADY => data1_ARREADY,
        I_ARADDR => sext_ln98_fu_500_p1,
        I_ARLEN => ap_const_lv32_8,
        I_RVALID => data1_RVALID,
        I_RREADY => data1_RREADY,
        I_RDATA => data1_RDATA,
        I_RFIFONUM => data1_RFIFONUM,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => data1_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWLEN => ap_const_lv32_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => data1_WREADY,
        I_WDATA => ap_const_lv64_0,
        I_WSTRB => ap_const_lv8_0,
        I_BVALID => data1_BVALID,
        I_BREADY => ap_const_logic_0);

    data2_m_axi_U : component compress_data2_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 4,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA2_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA2_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA2_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA2_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA2_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA2_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA2_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA2_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA2_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA2_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA2_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 9,
        USER_DW => 64,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_data2_AWVALID,
        AWREADY => m_axi_data2_AWREADY,
        AWADDR => m_axi_data2_AWADDR,
        AWID => m_axi_data2_AWID,
        AWLEN => m_axi_data2_AWLEN,
        AWSIZE => m_axi_data2_AWSIZE,
        AWBURST => m_axi_data2_AWBURST,
        AWLOCK => m_axi_data2_AWLOCK,
        AWCACHE => m_axi_data2_AWCACHE,
        AWPROT => m_axi_data2_AWPROT,
        AWQOS => m_axi_data2_AWQOS,
        AWREGION => m_axi_data2_AWREGION,
        AWUSER => m_axi_data2_AWUSER,
        WVALID => m_axi_data2_WVALID,
        WREADY => m_axi_data2_WREADY,
        WDATA => m_axi_data2_WDATA,
        WSTRB => m_axi_data2_WSTRB,
        WLAST => m_axi_data2_WLAST,
        WID => m_axi_data2_WID,
        WUSER => m_axi_data2_WUSER,
        ARVALID => m_axi_data2_ARVALID,
        ARREADY => m_axi_data2_ARREADY,
        ARADDR => m_axi_data2_ARADDR,
        ARID => m_axi_data2_ARID,
        ARLEN => m_axi_data2_ARLEN,
        ARSIZE => m_axi_data2_ARSIZE,
        ARBURST => m_axi_data2_ARBURST,
        ARLOCK => m_axi_data2_ARLOCK,
        ARCACHE => m_axi_data2_ARCACHE,
        ARPROT => m_axi_data2_ARPROT,
        ARQOS => m_axi_data2_ARQOS,
        ARREGION => m_axi_data2_ARREGION,
        ARUSER => m_axi_data2_ARUSER,
        RVALID => m_axi_data2_RVALID,
        RREADY => m_axi_data2_RREADY,
        RDATA => m_axi_data2_RDATA,
        RLAST => m_axi_data2_RLAST,
        RID => m_axi_data2_RID,
        RUSER => m_axi_data2_RUSER,
        RRESP => m_axi_data2_RRESP,
        BVALID => m_axi_data2_BVALID,
        BREADY => m_axi_data2_BREADY,
        BRESP => m_axi_data2_BRESP,
        BID => m_axi_data2_BID,
        BUSER => m_axi_data2_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => data2_ARREADY,
        I_ARADDR => ap_const_lv64_0,
        I_ARLEN => ap_const_lv32_0,
        I_RVALID => data2_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => data2_RDATA,
        I_RFIFONUM => data2_RFIFONUM,
        I_AWVALID => data2_AWVALID,
        I_AWREADY => data2_AWREADY,
        I_AWADDR => sext_ln126_fu_518_p1,
        I_AWLEN => ap_const_lv32_8,
        I_WVALID => data2_WVALID,
        I_WREADY => data2_WREADY,
        I_WDATA => data2_WDATA,
        I_WSTRB => ap_const_lv8_FF,
        I_BVALID => data2_BVALID,
        I_BREADY => data2_BREADY);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_round_function_fu_242_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_round_function_fu_242_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                    grp_round_function_fu_242_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_round_function_fu_242_ap_ready = ap_const_logic_1)) then 
                    grp_round_function_fu_242_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    block_len_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    block_words_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    chaining_value_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    counter_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    flags_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    out_r_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                block_16_reg_814 <= data1_RDATA(63 downto 32);
                block_reg_803 <= block_fu_514_p1;
                state_1_reg_797 <= data0_RDATA(63 downto 32);
                state_reg_791 <= state_fu_510_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                block_17_reg_850 <= block_17_fu_532_p1;
                block_18_reg_861 <= data1_RDATA(63 downto 32);
                state_2_reg_838 <= state_2_fu_528_p1;
                state_3_reg_844 <= data0_RDATA(63 downto 32);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                block_19_reg_884 <= block_19_fu_540_p1;
                block_20_reg_895 <= data1_RDATA(63 downto 32);
                state_4_reg_872 <= state_4_fu_536_p1;
                state_5_reg_878 <= data0_RDATA(63 downto 32);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                block_21_reg_918 <= block_21_fu_548_p1;
                block_22_reg_929 <= data1_RDATA(63 downto 32);
                state_6_reg_906 <= state_6_fu_544_p1;
                state_7_reg_912 <= data0_RDATA(63 downto 32);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                block_23_reg_940 <= block_23_fu_552_p1;
                block_24_reg_951 <= data1_RDATA(63 downto 32);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                block_25_reg_962 <= block_25_fu_556_p1;
                block_26_reg_973 <= data1_RDATA(63 downto 32);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                block_27_reg_984 <= block_27_fu_560_p1;
                block_28_reg_995 <= data1_RDATA(63 downto 32);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                block_29_reg_1006 <= block_29_fu_564_p1;
                block_30_reg_1017 <= data1_RDATA(63 downto 32);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (block_len_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (block_len_0_vld_reg = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (block_len_0_vld_reg = ap_const_logic_0)))) then
                block_len_0_data_reg <= block_len;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                block_len_read_reg_749 <= block_len_0_data_reg;
                flags_read_reg_744 <= flags_0_data_reg;
                state_8_reg_759 <= state_8_fu_456_p1;
                state_9_reg_764 <= counter_0_data_reg(63 downto 32);
                trunc_ln1_reg_769 <= block_words_0_data_reg(63 downto 3);
                trunc_ln2_reg_774 <= out_r_0_data_reg(63 downto 3);
                trunc_ln_reg_754 <= chaining_value_0_data_reg(63 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (block_words_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (block_words_0_vld_reg = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (block_words_0_vld_reg = ap_const_logic_0)))) then
                block_words_0_data_reg <= block_words;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (chaining_value_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (chaining_value_0_vld_reg = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (chaining_value_0_vld_reg = ap_const_logic_0)))) then
                chaining_value_0_data_reg <= chaining_value;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (counter_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (counter_0_vld_reg = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (counter_0_vld_reg = ap_const_logic_0)))) then
                counter_0_data_reg <= counter;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (flags_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (flags_0_vld_reg = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (flags_0_vld_reg = ap_const_logic_0)))) then
                flags_0_data_reg <= flags;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (out_r_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (out_r_0_vld_reg = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (out_r_0_vld_reg = ap_const_logic_0)))) then
                out_r_0_data_reg <= out_r;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((grp_round_function_fu_242_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state30)) or ((grp_round_function_fu_242_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state28)) or ((grp_round_function_fu_242_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state26)) or ((grp_round_function_fu_242_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24)) or ((grp_round_function_fu_242_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((grp_round_function_fu_242_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20)))) then
                reg_366 <= grp_round_function_fu_242_ap_return_0;
                reg_371 <= grp_round_function_fu_242_ap_return_1;
                reg_376 <= grp_round_function_fu_242_ap_return_2;
                reg_381 <= grp_round_function_fu_242_ap_return_3;
                reg_386 <= grp_round_function_fu_242_ap_return_4;
                reg_391 <= grp_round_function_fu_242_ap_return_5;
                reg_396 <= grp_round_function_fu_242_ap_return_6;
                reg_401 <= grp_round_function_fu_242_ap_return_7;
                reg_406 <= grp_round_function_fu_242_ap_return_8;
                reg_411 <= grp_round_function_fu_242_ap_return_9;
                reg_416 <= grp_round_function_fu_242_ap_return_10;
                reg_421 <= grp_round_function_fu_242_ap_return_11;
                reg_426 <= grp_round_function_fu_242_ap_return_12;
                reg_431 <= grp_round_function_fu_242_ap_return_13;
                reg_436 <= grp_round_function_fu_242_ap_return_14;
                reg_441 <= grp_round_function_fu_242_ap_return_15;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then
                xor_ln117_1_reg_1043 <= xor_ln117_1_fu_616_p2;
                xor_ln117_2_reg_1053 <= xor_ln117_2_fu_627_p2;
                xor_ln117_3_reg_1063 <= xor_ln117_3_fu_638_p2;
                xor_ln117_4_reg_1073 <= xor_ln117_4_fu_649_p2;
                xor_ln117_5_reg_1083 <= xor_ln117_5_fu_660_p2;
                xor_ln117_6_reg_1093 <= xor_ln117_6_fu_671_p2;
                xor_ln117_7_reg_1098 <= xor_ln117_7_fu_677_p2;
                xor_ln117_reg_1033 <= xor_ln117_fu_605_p2;
                xor_ln118_1_reg_1038 <= xor_ln118_1_fu_611_p2;
                xor_ln118_2_reg_1048 <= xor_ln118_2_fu_622_p2;
                xor_ln118_3_reg_1058 <= xor_ln118_3_fu_633_p2;
                xor_ln118_4_reg_1068 <= xor_ln118_4_fu_644_p2;
                xor_ln118_5_reg_1078 <= xor_ln118_5_fu_655_p2;
                xor_ln118_6_reg_1088 <= xor_ln118_6_fu_666_p2;
                xor_ln118_7_reg_1103 <= xor_ln118_7_fu_683_p2;
                xor_ln118_reg_1028 <= xor_ln118_fu_600_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state45, ap_CS_fsm_state20, grp_round_function_fu_242_ap_done, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, data1_RVALID, data2_AWREADY, data2_WREADY, data2_BVALID, ap_block_state3_io, ap_block_state11, ap_block_state12, ap_block_state13, ap_block_state14)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_boolean_0 = ap_block_state3_io))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if ((not(((data2_AWREADY = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state11))) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_boolean_0 = ap_block_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (ap_const_boolean_0 = ap_block_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_boolean_0 = ap_block_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                if (((data1_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                if (((data1_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                if (((data1_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                if (((data1_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                if (((grp_round_function_fu_242_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                if (((grp_round_function_fu_242_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                if (((grp_round_function_fu_242_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                if (((grp_round_function_fu_242_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                if (((grp_round_function_fu_242_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                if (((grp_round_function_fu_242_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                if (((grp_round_function_fu_242_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state33 => 
                if (((data2_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state33))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_state33;
                end if;
            when ap_ST_fsm_state34 => 
                if (((data2_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when ap_ST_fsm_state35 => 
                if (((data2_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when ap_ST_fsm_state36 => 
                if (((data2_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state36))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                else
                    ap_NS_fsm <= ap_ST_fsm_state36;
                end if;
            when ap_ST_fsm_state37 => 
                if (((data2_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then
                    ap_NS_fsm <= ap_ST_fsm_state38;
                else
                    ap_NS_fsm <= ap_ST_fsm_state37;
                end if;
            when ap_ST_fsm_state38 => 
                if (((data2_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state38))) then
                    ap_NS_fsm <= ap_ST_fsm_state39;
                else
                    ap_NS_fsm <= ap_ST_fsm_state38;
                end if;
            when ap_ST_fsm_state39 => 
                if (((data2_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state39))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_state39;
                end if;
            when ap_ST_fsm_state40 => 
                if (((data2_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state40))) then
                    ap_NS_fsm <= ap_ST_fsm_state41;
                else
                    ap_NS_fsm <= ap_ST_fsm_state40;
                end if;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                if (((data2_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state45))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state45;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;

    ap_ST_fsm_state11_blk_assign_proc : process(data2_AWREADY, ap_block_state11)
    begin
        if (((data2_AWREADY = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state11))) then 
            ap_ST_fsm_state11_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state11_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state12_blk_assign_proc : process(ap_block_state12)
    begin
        if ((ap_const_boolean_1 = ap_block_state12)) then 
            ap_ST_fsm_state12_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state12_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state13_blk_assign_proc : process(ap_block_state13)
    begin
        if ((ap_const_boolean_1 = ap_block_state13)) then 
            ap_ST_fsm_state13_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state13_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state14_blk_assign_proc : process(ap_block_state14)
    begin
        if ((ap_const_boolean_1 = ap_block_state14)) then 
            ap_ST_fsm_state14_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state14_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state15_blk_assign_proc : process(data1_RVALID)
    begin
        if ((data1_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state15_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state15_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state16_blk_assign_proc : process(data1_RVALID)
    begin
        if ((data1_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state16_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state16_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state17_blk_assign_proc : process(data1_RVALID)
    begin
        if ((data1_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state17_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state17_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state18_blk_assign_proc : process(data1_RVALID)
    begin
        if ((data1_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state18_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state18_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state20_blk_assign_proc : process(grp_round_function_fu_242_ap_done)
    begin
        if ((grp_round_function_fu_242_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state20_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state20_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state21_blk <= ap_const_logic_0;

    ap_ST_fsm_state22_blk_assign_proc : process(grp_round_function_fu_242_ap_done)
    begin
        if ((grp_round_function_fu_242_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state22_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state22_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state23_blk <= ap_const_logic_0;

    ap_ST_fsm_state24_blk_assign_proc : process(grp_round_function_fu_242_ap_done)
    begin
        if ((grp_round_function_fu_242_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state24_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state24_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state25_blk <= ap_const_logic_0;

    ap_ST_fsm_state26_blk_assign_proc : process(grp_round_function_fu_242_ap_done)
    begin
        if ((grp_round_function_fu_242_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state26_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state26_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state27_blk <= ap_const_logic_0;

    ap_ST_fsm_state28_blk_assign_proc : process(grp_round_function_fu_242_ap_done)
    begin
        if ((grp_round_function_fu_242_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state28_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state28_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state29_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state30_blk_assign_proc : process(grp_round_function_fu_242_ap_done)
    begin
        if ((grp_round_function_fu_242_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state30_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state30_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state31_blk <= ap_const_logic_0;

    ap_ST_fsm_state32_blk_assign_proc : process(grp_round_function_fu_242_ap_done)
    begin
        if ((grp_round_function_fu_242_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state32_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state32_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state33_blk_assign_proc : process(data2_WREADY)
    begin
        if ((data2_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state33_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state33_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state34_blk_assign_proc : process(data2_WREADY)
    begin
        if ((data2_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state34_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state34_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state35_blk_assign_proc : process(data2_WREADY)
    begin
        if ((data2_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state35_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state35_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state36_blk_assign_proc : process(data2_WREADY)
    begin
        if ((data2_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state36_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state36_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state37_blk_assign_proc : process(data2_WREADY)
    begin
        if ((data2_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state37_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state37_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state38_blk_assign_proc : process(data2_WREADY)
    begin
        if ((data2_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state38_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state38_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state39_blk_assign_proc : process(data2_WREADY)
    begin
        if ((data2_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state39_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state39_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state3_blk_assign_proc : process(ap_block_state3_io)
    begin
        if ((ap_const_boolean_1 = ap_block_state3_io)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state40_blk_assign_proc : process(data2_WREADY)
    begin
        if ((data2_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state40_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state40_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state41_blk <= ap_const_logic_0;
    ap_ST_fsm_state42_blk <= ap_const_logic_0;
    ap_ST_fsm_state43_blk <= ap_const_logic_0;
    ap_ST_fsm_state44_blk <= ap_const_logic_0;

    ap_ST_fsm_state45_blk_assign_proc : process(data2_BVALID)
    begin
        if ((data2_BVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state45_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state45_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state11_assign_proc : process(data0_RVALID, data1_RVALID)
    begin
                ap_block_state11 <= ((data1_RVALID = ap_const_logic_0) or (data0_RVALID = ap_const_logic_0));
    end process;


    ap_block_state12_assign_proc : process(data0_RVALID, data1_RVALID)
    begin
                ap_block_state12 <= ((data1_RVALID = ap_const_logic_0) or (data0_RVALID = ap_const_logic_0));
    end process;


    ap_block_state13_assign_proc : process(data0_RVALID, data1_RVALID)
    begin
                ap_block_state13 <= ((data1_RVALID = ap_const_logic_0) or (data0_RVALID = ap_const_logic_0));
    end process;


    ap_block_state14_assign_proc : process(data0_RVALID, data1_RVALID)
    begin
                ap_block_state14 <= ((data1_RVALID = ap_const_logic_0) or (data0_RVALID = ap_const_logic_0));
    end process;


    ap_block_state3_io_assign_proc : process(data0_ARREADY, data1_ARREADY)
    begin
                ap_block_state3_io <= ((data1_ARREADY = ap_const_logic_0) or (data0_ARREADY = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state45, data2_BVALID)
    begin
        if (((data2_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state45))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state45, data2_BVALID)
    begin
        if (((data2_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state45))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    block_17_fu_532_p1 <= data1_RDATA(32 - 1 downto 0);
    block_19_fu_540_p1 <= data1_RDATA(32 - 1 downto 0);
    block_21_fu_548_p1 <= data1_RDATA(32 - 1 downto 0);
    block_23_fu_552_p1 <= data1_RDATA(32 - 1 downto 0);
    block_25_fu_556_p1 <= data1_RDATA(32 - 1 downto 0);
    block_27_fu_560_p1 <= data1_RDATA(32 - 1 downto 0);
    block_29_fu_564_p1 <= data1_RDATA(32 - 1 downto 0);
    block_fu_514_p1 <= data1_RDATA(32 - 1 downto 0);

    block_len_0_ack_out_assign_proc : process(ap_CS_fsm_state45, ap_CS_fsm_state2, data2_BVALID)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((data2_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state45)))) then 
            block_len_0_ack_out <= ap_const_logic_1;
        else 
            block_len_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    block_words_0_ack_out_assign_proc : process(ap_CS_fsm_state45, ap_CS_fsm_state2, data2_BVALID)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((data2_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state45)))) then 
            block_words_0_ack_out <= ap_const_logic_1;
        else 
            block_words_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    chaining_value_0_ack_out_assign_proc : process(ap_CS_fsm_state45, ap_CS_fsm_state2, data2_BVALID)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((data2_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state45)))) then 
            chaining_value_0_ack_out <= ap_const_logic_1;
        else 
            chaining_value_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    counter_0_ack_out_assign_proc : process(ap_CS_fsm_state45, ap_CS_fsm_state2, data2_BVALID)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((data2_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state45)))) then 
            counter_0_ack_out <= ap_const_logic_1;
        else 
            counter_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    data0_ARVALID_assign_proc : process(ap_CS_fsm_state3, ap_block_state3_io)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_boolean_0 = ap_block_state3_io))) then 
            data0_ARVALID <= ap_const_logic_1;
        else 
            data0_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    data0_RREADY_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, data2_AWREADY, ap_block_state11, ap_block_state12, ap_block_state13, ap_block_state14)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_boolean_0 = ap_block_state14)) or ((ap_const_logic_1 = ap_CS_fsm_state13) and (ap_const_boolean_0 = ap_block_state13)) or ((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_boolean_0 = ap_block_state12)) or (not(((data2_AWREADY = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state11))) and (ap_const_logic_1 = ap_CS_fsm_state11)))) then 
            data0_RREADY <= ap_const_logic_1;
        else 
            data0_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    data0_blk_n_AR_assign_proc : process(m_axi_data0_ARREADY, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            data0_blk_n_AR <= m_axi_data0_ARREADY;
        else 
            data0_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    data0_blk_n_R_assign_proc : process(m_axi_data0_RVALID, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            data0_blk_n_R <= m_axi_data0_RVALID;
        else 
            data0_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    data1_ARVALID_assign_proc : process(ap_CS_fsm_state3, ap_block_state3_io)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_boolean_0 = ap_block_state3_io))) then 
            data1_ARVALID <= ap_const_logic_1;
        else 
            data1_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    data1_RREADY_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, data1_RVALID, data2_AWREADY, ap_block_state11, ap_block_state12, ap_block_state13, ap_block_state14)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_boolean_0 = ap_block_state14)) or ((ap_const_logic_1 = ap_CS_fsm_state13) and (ap_const_boolean_0 = ap_block_state13)) or ((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_boolean_0 = ap_block_state12)) or ((data1_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18)) or ((data1_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17)) or ((data1_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((data1_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15)) or (not(((data2_AWREADY = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state11))) and (ap_const_logic_1 = ap_CS_fsm_state11)))) then 
            data1_RREADY <= ap_const_logic_1;
        else 
            data1_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    data1_blk_n_AR_assign_proc : process(m_axi_data1_ARREADY, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            data1_blk_n_AR <= m_axi_data1_ARREADY;
        else 
            data1_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    data1_blk_n_R_assign_proc : process(m_axi_data1_RVALID, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            data1_blk_n_R <= m_axi_data1_RVALID;
        else 
            data1_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    data2_AWVALID_assign_proc : process(ap_CS_fsm_state11, data2_AWREADY, ap_block_state11)
    begin
        if ((not(((data2_AWREADY = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state11))) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            data2_AWVALID <= ap_const_logic_1;
        else 
            data2_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    data2_BREADY_assign_proc : process(ap_CS_fsm_state45, data2_BVALID)
    begin
        if (((data2_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state45))) then 
            data2_BREADY <= ap_const_logic_1;
        else 
            data2_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    data2_WDATA_assign_proc : process(ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, tmp_fu_688_p3, tmp_s_fu_695_p3, tmp_23_fu_702_p3, tmp_24_fu_709_p3, tmp_25_fu_716_p3, tmp_26_fu_723_p3, tmp_27_fu_730_p3, tmp_28_fu_737_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            data2_WDATA <= tmp_28_fu_737_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            data2_WDATA <= tmp_27_fu_730_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            data2_WDATA <= tmp_26_fu_723_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            data2_WDATA <= tmp_25_fu_716_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            data2_WDATA <= tmp_24_fu_709_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            data2_WDATA <= tmp_23_fu_702_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            data2_WDATA <= tmp_s_fu_695_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            data2_WDATA <= tmp_fu_688_p3;
        else 
            data2_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    data2_WVALID_assign_proc : process(ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, data2_WREADY)
    begin
        if ((((data2_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state40)) or ((data2_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state39)) or ((data2_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state38)) or ((data2_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state37)) or ((data2_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state36)) or ((data2_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35)) or ((data2_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state34)) or ((data2_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state33)))) then 
            data2_WVALID <= ap_const_logic_1;
        else 
            data2_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    data2_blk_n_AW_assign_proc : process(m_axi_data2_AWREADY, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            data2_blk_n_AW <= m_axi_data2_AWREADY;
        else 
            data2_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    data2_blk_n_B_assign_proc : process(m_axi_data2_BVALID, ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            data2_blk_n_B <= m_axi_data2_BVALID;
        else 
            data2_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    data2_blk_n_W_assign_proc : process(m_axi_data2_WREADY, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            data2_blk_n_W <= m_axi_data2_WREADY;
        else 
            data2_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    flags_0_ack_out_assign_proc : process(ap_CS_fsm_state45, ap_CS_fsm_state2, data2_BVALID)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((data2_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state45)))) then 
            flags_0_ack_out <= ap_const_logic_1;
        else 
            flags_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    grp_round_function_fu_242_ap_start <= grp_round_function_fu_242_ap_start_reg;

    grp_round_function_fu_242_m_0_val_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, block_reg_803, block_17_reg_850, block_18_reg_861, block_24_reg_951, block_25_reg_962, block_26_reg_973, block_27_reg_984, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_round_function_fu_242_m_0_val <= block_26_reg_973;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_round_function_fu_242_m_0_val <= block_24_reg_951;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_round_function_fu_242_m_0_val <= block_27_reg_984;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_round_function_fu_242_m_0_val <= block_25_reg_962;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_round_function_fu_242_m_0_val <= block_18_reg_861;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_round_function_fu_242_m_0_val <= block_17_reg_850;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_round_function_fu_242_m_0_val <= block_reg_803;
        else 
            grp_round_function_fu_242_m_0_val <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_round_function_fu_242_m_10_val_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, block_reg_803, block_17_reg_850, block_20_reg_895, block_24_reg_951, block_25_reg_962, block_26_reg_973, block_27_reg_984, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_round_function_fu_242_m_10_val <= block_17_reg_850;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_round_function_fu_242_m_10_val <= block_reg_803;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_round_function_fu_242_m_10_val <= block_20_reg_895;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_round_function_fu_242_m_10_val <= block_26_reg_973;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_round_function_fu_242_m_10_val <= block_24_reg_951;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_round_function_fu_242_m_10_val <= block_27_reg_984;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_round_function_fu_242_m_10_val <= block_25_reg_962;
        else 
            grp_round_function_fu_242_m_10_val <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_round_function_fu_242_m_11_val_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, block_reg_803, block_17_reg_850, block_18_reg_861, block_20_reg_895, block_25_reg_962, block_26_reg_973, block_27_reg_984, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_round_function_fu_242_m_11_val <= block_27_reg_984;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_round_function_fu_242_m_11_val <= block_25_reg_962;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_round_function_fu_242_m_11_val <= block_18_reg_861;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_round_function_fu_242_m_11_val <= block_17_reg_850;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_round_function_fu_242_m_11_val <= block_reg_803;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_round_function_fu_242_m_11_val <= block_20_reg_895;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_round_function_fu_242_m_11_val <= block_26_reg_973;
        else 
            grp_round_function_fu_242_m_11_val <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_round_function_fu_242_m_12_val_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, block_reg_803, block_17_reg_850, block_18_reg_861, block_20_reg_895, block_24_reg_951, block_26_reg_973, block_27_reg_984, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_round_function_fu_242_m_12_val <= block_18_reg_861;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_round_function_fu_242_m_12_val <= block_17_reg_850;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_round_function_fu_242_m_12_val <= block_reg_803;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_round_function_fu_242_m_12_val <= block_20_reg_895;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_round_function_fu_242_m_12_val <= block_26_reg_973;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_round_function_fu_242_m_12_val <= block_24_reg_951;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_round_function_fu_242_m_12_val <= block_27_reg_984;
        else 
            grp_round_function_fu_242_m_12_val <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_round_function_fu_242_m_13_val_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, block_16_reg_814, block_19_reg_884, block_21_reg_918, block_23_reg_940, block_28_reg_995, block_29_reg_1006, block_30_reg_1017, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_round_function_fu_242_m_13_val <= block_19_reg_884;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_round_function_fu_242_m_13_val <= block_21_reg_918;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_round_function_fu_242_m_13_val <= block_16_reg_814;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_round_function_fu_242_m_13_val <= block_23_reg_940;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_round_function_fu_242_m_13_val <= block_30_reg_1017;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_round_function_fu_242_m_13_val <= block_29_reg_1006;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_round_function_fu_242_m_13_val <= block_28_reg_995;
        else 
            grp_round_function_fu_242_m_13_val <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_round_function_fu_242_m_14_val_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, block_16_reg_814, block_19_reg_884, block_21_reg_918, block_22_reg_929, block_23_reg_940, block_29_reg_1006, block_30_reg_1017, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_round_function_fu_242_m_14_val <= block_22_reg_929;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_round_function_fu_242_m_14_val <= block_19_reg_884;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_round_function_fu_242_m_14_val <= block_21_reg_918;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_round_function_fu_242_m_14_val <= block_16_reg_814;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_round_function_fu_242_m_14_val <= block_23_reg_940;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_round_function_fu_242_m_14_val <= block_30_reg_1017;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_round_function_fu_242_m_14_val <= block_29_reg_1006;
        else 
            grp_round_function_fu_242_m_14_val <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_round_function_fu_242_m_15_val_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, block_16_reg_814, block_19_reg_884, block_21_reg_918, block_22_reg_929, block_23_reg_940, block_28_reg_995, block_30_reg_1017, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_round_function_fu_242_m_15_val <= block_28_reg_995;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_round_function_fu_242_m_15_val <= block_22_reg_929;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_round_function_fu_242_m_15_val <= block_19_reg_884;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_round_function_fu_242_m_15_val <= block_21_reg_918;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_round_function_fu_242_m_15_val <= block_16_reg_814;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_round_function_fu_242_m_15_val <= block_23_reg_940;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_round_function_fu_242_m_15_val <= block_30_reg_1017;
        else 
            grp_round_function_fu_242_m_15_val <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_round_function_fu_242_m_1_val_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, block_16_reg_814, block_19_reg_884, block_21_reg_918, block_22_reg_929, block_28_reg_995, block_29_reg_1006, block_30_reg_1017, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_round_function_fu_242_m_1_val <= block_30_reg_1017;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_round_function_fu_242_m_1_val <= block_29_reg_1006;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_round_function_fu_242_m_1_val <= block_28_reg_995;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_round_function_fu_242_m_1_val <= block_22_reg_929;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_round_function_fu_242_m_1_val <= block_19_reg_884;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_round_function_fu_242_m_1_val <= block_21_reg_918;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_round_function_fu_242_m_1_val <= block_16_reg_814;
        else 
            grp_round_function_fu_242_m_1_val <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_round_function_fu_242_m_2_val_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, block_17_reg_850, block_18_reg_861, block_20_reg_895, block_24_reg_951, block_25_reg_962, block_26_reg_973, block_27_reg_984, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_round_function_fu_242_m_2_val <= block_20_reg_895;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_round_function_fu_242_m_2_val <= block_26_reg_973;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_round_function_fu_242_m_2_val <= block_24_reg_951;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_round_function_fu_242_m_2_val <= block_27_reg_984;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_round_function_fu_242_m_2_val <= block_25_reg_962;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_round_function_fu_242_m_2_val <= block_18_reg_861;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_round_function_fu_242_m_2_val <= block_17_reg_850;
        else 
            grp_round_function_fu_242_m_2_val <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_round_function_fu_242_m_3_val_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, block_reg_803, block_18_reg_861, block_20_reg_895, block_24_reg_951, block_25_reg_962, block_26_reg_973, block_27_reg_984, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_round_function_fu_242_m_3_val <= block_reg_803;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_round_function_fu_242_m_3_val <= block_20_reg_895;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_round_function_fu_242_m_3_val <= block_26_reg_973;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_round_function_fu_242_m_3_val <= block_24_reg_951;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_round_function_fu_242_m_3_val <= block_27_reg_984;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_round_function_fu_242_m_3_val <= block_25_reg_962;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_round_function_fu_242_m_3_val <= block_18_reg_861;
        else 
            grp_round_function_fu_242_m_3_val <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_round_function_fu_242_m_4_val_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, block_16_reg_814, block_19_reg_884, block_22_reg_929, block_23_reg_940, block_28_reg_995, block_29_reg_1006, block_30_reg_1017, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_round_function_fu_242_m_4_val <= block_16_reg_814;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_round_function_fu_242_m_4_val <= block_23_reg_940;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_round_function_fu_242_m_4_val <= block_30_reg_1017;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_round_function_fu_242_m_4_val <= block_29_reg_1006;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_round_function_fu_242_m_4_val <= block_28_reg_995;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_round_function_fu_242_m_4_val <= block_22_reg_929;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_round_function_fu_242_m_4_val <= block_19_reg_884;
        else 
            grp_round_function_fu_242_m_4_val <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_round_function_fu_242_m_5_val_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, block_reg_803, block_17_reg_850, block_18_reg_861, block_20_reg_895, block_24_reg_951, block_25_reg_962, block_27_reg_984, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_round_function_fu_242_m_5_val <= block_24_reg_951;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_round_function_fu_242_m_5_val <= block_27_reg_984;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_round_function_fu_242_m_5_val <= block_25_reg_962;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_round_function_fu_242_m_5_val <= block_18_reg_861;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_round_function_fu_242_m_5_val <= block_17_reg_850;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_round_function_fu_242_m_5_val <= block_reg_803;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_round_function_fu_242_m_5_val <= block_20_reg_895;
        else 
            grp_round_function_fu_242_m_5_val <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_round_function_fu_242_m_6_val_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, block_19_reg_884, block_21_reg_918, block_22_reg_929, block_23_reg_940, block_28_reg_995, block_29_reg_1006, block_30_reg_1017, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_round_function_fu_242_m_6_val <= block_23_reg_940;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_round_function_fu_242_m_6_val <= block_30_reg_1017;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_round_function_fu_242_m_6_val <= block_29_reg_1006;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_round_function_fu_242_m_6_val <= block_28_reg_995;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_round_function_fu_242_m_6_val <= block_22_reg_929;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_round_function_fu_242_m_6_val <= block_19_reg_884;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_round_function_fu_242_m_6_val <= block_21_reg_918;
        else 
            grp_round_function_fu_242_m_6_val <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_round_function_fu_242_m_7_val_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, block_16_reg_814, block_21_reg_918, block_22_reg_929, block_23_reg_940, block_28_reg_995, block_29_reg_1006, block_30_reg_1017, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_round_function_fu_242_m_7_val <= block_21_reg_918;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_round_function_fu_242_m_7_val <= block_16_reg_814;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_round_function_fu_242_m_7_val <= block_23_reg_940;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_round_function_fu_242_m_7_val <= block_30_reg_1017;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_round_function_fu_242_m_7_val <= block_29_reg_1006;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_round_function_fu_242_m_7_val <= block_28_reg_995;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_round_function_fu_242_m_7_val <= block_22_reg_929;
        else 
            grp_round_function_fu_242_m_7_val <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_round_function_fu_242_m_8_val_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, block_16_reg_814, block_19_reg_884, block_21_reg_918, block_22_reg_929, block_23_reg_940, block_28_reg_995, block_29_reg_1006, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_round_function_fu_242_m_8_val <= block_29_reg_1006;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_round_function_fu_242_m_8_val <= block_28_reg_995;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_round_function_fu_242_m_8_val <= block_22_reg_929;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_round_function_fu_242_m_8_val <= block_19_reg_884;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_round_function_fu_242_m_8_val <= block_21_reg_918;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_round_function_fu_242_m_8_val <= block_16_reg_814;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_round_function_fu_242_m_8_val <= block_23_reg_940;
        else 
            grp_round_function_fu_242_m_8_val <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_round_function_fu_242_m_9_val_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, block_reg_803, block_17_reg_850, block_18_reg_861, block_20_reg_895, block_24_reg_951, block_25_reg_962, block_26_reg_973, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_round_function_fu_242_m_9_val <= block_25_reg_962;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_round_function_fu_242_m_9_val <= block_18_reg_861;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_round_function_fu_242_m_9_val <= block_17_reg_850;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_round_function_fu_242_m_9_val <= block_reg_803;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_round_function_fu_242_m_9_val <= block_20_reg_895;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_round_function_fu_242_m_9_val <= block_26_reg_973;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_round_function_fu_242_m_9_val <= block_24_reg_951;
        else 
            grp_round_function_fu_242_m_9_val <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_round_function_fu_242_state_0_read_assign_proc : process(reg_366, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, state_reg_791, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            grp_round_function_fu_242_state_0_read <= reg_366;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_round_function_fu_242_state_0_read <= state_reg_791;
        else 
            grp_round_function_fu_242_state_0_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_round_function_fu_242_state_10_read_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, reg_416, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            grp_round_function_fu_242_state_10_read <= reg_416;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_round_function_fu_242_state_10_read <= ap_const_lv32_3C6EF372;
        else 
            grp_round_function_fu_242_state_10_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_round_function_fu_242_state_11_read_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, reg_421, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            grp_round_function_fu_242_state_11_read <= reg_421;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_round_function_fu_242_state_11_read <= ap_const_lv32_A54FF53A;
        else 
            grp_round_function_fu_242_state_11_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_round_function_fu_242_state_1213_read_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, reg_426, state_8_reg_759, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            grp_round_function_fu_242_state_1213_read <= reg_426;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_round_function_fu_242_state_1213_read <= state_8_reg_759;
        else 
            grp_round_function_fu_242_state_1213_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_round_function_fu_242_state_13_read_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, reg_431, state_9_reg_764, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            grp_round_function_fu_242_state_13_read <= reg_431;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_round_function_fu_242_state_13_read <= state_9_reg_764;
        else 
            grp_round_function_fu_242_state_13_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_round_function_fu_242_state_14_read_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, reg_436, block_len_read_reg_749, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            grp_round_function_fu_242_state_14_read <= reg_436;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_round_function_fu_242_state_14_read <= block_len_read_reg_749;
        else 
            grp_round_function_fu_242_state_14_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_round_function_fu_242_state_15_read_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, reg_441, flags_read_reg_744, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            grp_round_function_fu_242_state_15_read <= reg_441;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_round_function_fu_242_state_15_read <= flags_read_reg_744;
        else 
            grp_round_function_fu_242_state_15_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_round_function_fu_242_state_1_read_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, reg_371, state_1_reg_797, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            grp_round_function_fu_242_state_1_read <= reg_371;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_round_function_fu_242_state_1_read <= state_1_reg_797;
        else 
            grp_round_function_fu_242_state_1_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_round_function_fu_242_state_2_read_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, reg_376, state_2_reg_838, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            grp_round_function_fu_242_state_2_read <= reg_376;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_round_function_fu_242_state_2_read <= state_2_reg_838;
        else 
            grp_round_function_fu_242_state_2_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_round_function_fu_242_state_3_read_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, reg_381, state_3_reg_844, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            grp_round_function_fu_242_state_3_read <= reg_381;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_round_function_fu_242_state_3_read <= state_3_reg_844;
        else 
            grp_round_function_fu_242_state_3_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_round_function_fu_242_state_4_read_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, reg_386, state_4_reg_872, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            grp_round_function_fu_242_state_4_read <= reg_386;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_round_function_fu_242_state_4_read <= state_4_reg_872;
        else 
            grp_round_function_fu_242_state_4_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_round_function_fu_242_state_5_read_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, reg_391, state_5_reg_878, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            grp_round_function_fu_242_state_5_read <= reg_391;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_round_function_fu_242_state_5_read <= state_5_reg_878;
        else 
            grp_round_function_fu_242_state_5_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_round_function_fu_242_state_6_read_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, reg_396, state_6_reg_906, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            grp_round_function_fu_242_state_6_read <= reg_396;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_round_function_fu_242_state_6_read <= state_6_reg_906;
        else 
            grp_round_function_fu_242_state_6_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_round_function_fu_242_state_7_read_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, reg_401, state_7_reg_912, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            grp_round_function_fu_242_state_7_read <= reg_401;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_round_function_fu_242_state_7_read <= state_7_reg_912;
        else 
            grp_round_function_fu_242_state_7_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_round_function_fu_242_state_8_read_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, reg_406, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            grp_round_function_fu_242_state_8_read <= reg_406;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_round_function_fu_242_state_8_read <= ap_const_lv32_6A09E667;
        else 
            grp_round_function_fu_242_state_8_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_round_function_fu_242_state_9_read_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, reg_411, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            grp_round_function_fu_242_state_9_read <= reg_411;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_round_function_fu_242_state_9_read <= ap_const_lv32_BB67AE85;
        else 
            grp_round_function_fu_242_state_9_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    out_r_0_ack_out_assign_proc : process(ap_CS_fsm_state45, ap_CS_fsm_state2, data2_BVALID)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((data2_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state45)))) then 
            out_r_0_ack_out <= ap_const_logic_1;
        else 
            out_r_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln126_fu_518_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln2_reg_774),64));

        sext_ln77_fu_490_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_reg_754),64));

        sext_ln98_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1_reg_769),64));

    state_2_fu_528_p1 <= data0_RDATA(32 - 1 downto 0);
    state_4_fu_536_p1 <= data0_RDATA(32 - 1 downto 0);
    state_6_fu_544_p1 <= data0_RDATA(32 - 1 downto 0);
    state_8_fu_456_p1 <= counter_0_data_reg(32 - 1 downto 0);
    state_fu_510_p1 <= data0_RDATA(32 - 1 downto 0);
    tmp_23_fu_702_p3 <= (xor_ln117_5_reg_1083 & xor_ln117_4_reg_1073);
    tmp_24_fu_709_p3 <= (xor_ln117_7_reg_1098 & xor_ln117_6_reg_1093);
    tmp_25_fu_716_p3 <= (xor_ln118_1_reg_1038 & xor_ln118_reg_1028);
    tmp_26_fu_723_p3 <= (xor_ln118_3_reg_1058 & xor_ln118_2_reg_1048);
    tmp_27_fu_730_p3 <= (xor_ln118_5_reg_1078 & xor_ln118_4_reg_1068);
    tmp_28_fu_737_p3 <= (xor_ln118_7_reg_1103 & xor_ln118_6_reg_1088);
    tmp_fu_688_p3 <= (xor_ln117_1_reg_1043 & xor_ln117_reg_1033);
    tmp_s_fu_695_p3 <= (xor_ln117_3_reg_1063 & xor_ln117_2_reg_1053);
    xor_ln117_1_fu_616_p2 <= (grp_round_function_fu_242_ap_return_9 xor grp_round_function_fu_242_ap_return_1);
    xor_ln117_2_fu_627_p2 <= (grp_round_function_fu_242_ap_return_2 xor grp_round_function_fu_242_ap_return_10);
    xor_ln117_3_fu_638_p2 <= (grp_round_function_fu_242_ap_return_3 xor grp_round_function_fu_242_ap_return_11);
    xor_ln117_4_fu_649_p2 <= (grp_round_function_fu_242_ap_return_4 xor grp_round_function_fu_242_ap_return_12);
    xor_ln117_5_fu_660_p2 <= (grp_round_function_fu_242_ap_return_5 xor grp_round_function_fu_242_ap_return_13);
    xor_ln117_6_fu_671_p2 <= (grp_round_function_fu_242_ap_return_6 xor grp_round_function_fu_242_ap_return_14);
    xor_ln117_7_fu_677_p2 <= (grp_round_function_fu_242_ap_return_7 xor grp_round_function_fu_242_ap_return_15);
    xor_ln117_fu_605_p2 <= (grp_round_function_fu_242_ap_return_8 xor grp_round_function_fu_242_ap_return_0);
    xor_ln118_1_fu_611_p2 <= (state_1_reg_797 xor grp_round_function_fu_242_ap_return_9);
    xor_ln118_2_fu_622_p2 <= (state_2_reg_838 xor grp_round_function_fu_242_ap_return_10);
    xor_ln118_3_fu_633_p2 <= (state_3_reg_844 xor grp_round_function_fu_242_ap_return_11);
    xor_ln118_4_fu_644_p2 <= (state_4_reg_872 xor grp_round_function_fu_242_ap_return_12);
    xor_ln118_5_fu_655_p2 <= (state_5_reg_878 xor grp_round_function_fu_242_ap_return_13);
    xor_ln118_6_fu_666_p2 <= (state_6_reg_906 xor grp_round_function_fu_242_ap_return_14);
    xor_ln118_7_fu_683_p2 <= (state_7_reg_912 xor grp_round_function_fu_242_ap_return_15);
    xor_ln118_fu_600_p2 <= (state_reg_791 xor grp_round_function_fu_242_ap_return_8);
end behav;
